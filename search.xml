<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>新手小白如何了解nas与docker，智能家居与NET</title>
      <link href="/2024/07/13/My-Four-Post/"/>
      <url>/2024/07/13/My-Four-Post/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步：硬件选材与选用技术"><a href="#第一步：硬件选材与选用技术" class="headerlink" title="第一步：硬件选材与选用技术"></a>第一步：硬件选材与选用技术</h2><ol><li><p>钢铁侠定制主机<br>我选择了宁美魔方CR160 8+256G钢铁侠定制版本的主机。主要原因有两个：一是因为我喜欢钢铁侠，这个定制版本的外观设计和性能配置都吸引了我；二是在我看到定制版本和非定制版本价格相同且优惠的情况下，我毫不犹豫地选择了钢铁侠定制版本。</p></li><li><p>固态硬盘<br>在了解了固态硬盘的技术后，我选择了2.2 ngff的梵想固态硬盘。固态硬盘的读写速度较快，能够提供良好的系统性能和响应速度。我通过京东购入时也获得了优惠。2023年价格非常便宜</p></li><li><p>硬盘盒磁盘阵列<br>在购买硬盘盒时，我注意到有一种像流浪地球中的数字生命卡带磁盘阵列方式，因此我选择了带有磁盘阵列功能的硬盘盒。我选用了2*2T的RAID1（镜像模式），这样可以提供更高的数据冗余和安全性，一旦一块硬盘损坏，数据仍然可以恢复。硬盘盒不便宜</p></li><li><p>外置无线网卡<br>为了实现双网卡配置和更好地连接到NAS以及智能家居设备，我选择了绿联8810c外置无线网卡。通过降低Ubuntu内核并安装对应的网卡驱动，我成功地实现了双网卡配置。</p></li></ol><h3 id="新手小白如何了解nas与docker，双网卡配置为了NAS，为了智能家居与NET，mac笔记本电脑dockerhost模式不支持，-为了网关net（最后发现猫无法net）-，单网卡在host-主机linux安装docker正常"><a href="#新手小白如何了解nas与docker，双网卡配置为了NAS，为了智能家居与NET，mac笔记本电脑dockerhost模式不支持，-为了网关net（最后发现猫无法net）-，单网卡在host-主机linux安装docker正常" class="headerlink" title="新手小白如何了解nas与docker，双网卡配置为了NAS，为了智能家居与NET，mac笔记本电脑dockerhost模式不支持， 为了网关net（最后发现猫无法net） ，单网卡在host 主机linux安装docker正常"></a>新手小白如何了解nas与docker，双网卡配置为了NAS，为了智能家居与NET，mac笔记本电脑dockerhost模式不支持， 为了网关net（最后发现猫无法net） ，单网卡在host 主机linux安装docker正常</h3><h4 id="一、使用的网卡对ubuntu内核有限制，故此降低内核进行安装"><a href="#一、使用的网卡对ubuntu内核有限制，故此降低内核进行安装" class="headerlink" title="一、使用的网卡对ubuntu内核有限制，故此降低内核进行安装"></a>一、使用的网卡对ubuntu内核有限制，故此降低内核进行安装</h4><p>配置条件环境 一定要调研清楚<br>网卡： 绿联8810c  官网搜索后内核需对应为18.4  内核对应最高版本5.3，安装后大于5.3，果断选择最新的系统内核（Ubuntu 20.04.01 版本内核为 5.4 5.4.0-21-generic<br>），前往github下载最新驱动或者商家京东店铺索要！</p><h4 id="二、网卡安装步骤："><a href="#二、网卡安装步骤：" class="headerlink" title="二、网卡安装步骤："></a>二、网卡安装步骤：</h4><p>下载所需依赖工具包：<br>sudo  apt-install net-tool<br>sudo apt update<br>sudo apt install build-essential</p><h4 id="网卡驱动下载："><a href="#网卡驱动下载：" class="headerlink" title="网卡驱动下载："></a>网卡驱动下载：</h4><p>github项目或者官方（由于官方没有提供通过github下载支持这款型号的网卡即可）<br>安装方式：<br>将驱动文件夹提取到桌面上<br><img src="/.io//1.png" alt="图1"><br>打开终端输入：cd 桌面&#x2F;rtl8821CU&#x2F;  注：不同系统可能桌面位置不同，如果不确定可以百度搜索下 </p><p>进入文件夹后输入：sudo make 密码需要输入当前使用账户密码</p><p>输入ls 查看8821cu.ko文件有没有生成</p><p>输入sudo make install  提示已经将驱动放入内核</p><p>可见结果：图形直接连（命令见下方命令）</p><p>命令连接wifi教程：<br>1.查看周围wifi信息</p><p>确保您的两个无线网卡都可以正常工作并已正确安装在您的计算机上。</p><p>打开终端或命令提示符，运行以下命令以查看当前的网络接口列表：<br>ifconfig -a<br>这将列出您的计算机上所有的网络接口，包括无线网卡。</p><p>确定要连接的无线网络的名称（SSID）和密码。确保您已正确配置了这些信息。</p><p>运行以下命令来连接第一个无线网卡到目标网络：</p><p>sudo nmcli device wifi connect <SSID> password <password> ifname <interface><br>将 <SSID> 替换为目标网络的名称，<password> 替换为网络的密码，<interface> 替换为第一个无线网卡的接口名称（例如 wlo2）。</interface></password></SSID></interface></password></SSID></p><p>运行以下命令来连接第二个无线网卡到目标网络：</p><p>sudo nmcli device wifi connect <SSID> password <password> ifname <interface></interface></password></SSID></p><p>将 <SSID> 替换为目标网络的名称，<password> 替换为网络的密码，<interface> 替换为第二个无线网卡的接口名称（例如 wlo3）。</interface></password></SSID></p><p>等待一段时间，让系统完成连接并获取 IP 地址再通过ifocnifg查看</p><p>安装docker<br>在 Ubuntu 上安装 Docker 的步骤如下：</p><p>打开终端或命令行界面。</p><p>更新系统软件包列表，运行以下命令：</p><p>sudo apt update<br>安装 Docker 的依赖软件包，运行以下命令：<br>sudo apt install apt-transport-https ca-certificates curl software-properties-common</p><p>添加 Docker 的官方 GPG 密钥，运行以下命令：<br>curl -fsSL <a href="https://download.docker.com/linux/ubuntu/gpg">https://download.docker.com/linux/ubuntu/gpg</a> | sudo gpg –dearmor -o &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg</p><p>添加 Docker 的稳定版本软件源，运行以下命令：<br>echo “deb [arch&#x3D;amd64 signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] <a href="https://download.docker.com/linux/ubuntu">https://download.docker.com/linux/ubuntu</a> $(lsb_release -cs) stable” | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &gt; &#x2F;dev&#x2F;null</p><p>更新软件包列表，运行以下命令：<br>sudo apt update<br>安装 Docker 引擎，运行以下命令：<br>sudo apt install docker-ce docker-ce-cli containerd.io</p><p>验证 Docker 是否成功安装，运行以下命令检查 Docker 版本：<br>docker –version</p><p>如果成功安装，将显示 Docker 的版本信息。</p><p>Ifconfig：检测网卡docker的容器网卡</p><p>docker安装home-assistant：（智能家居容器）<br>整理思路，首先在自己喜欢的个人目录上创建一个docker文件，这个文件是用来映射所有容器的config<br>例如我在home&#x2F;user 下创建的：my-container</p><p>然后下载home-assistant，运行以下命令：（注意 不是sudo要用sudo 切到管理员）<br>sudo docker pull homeassistant&#x2F;home-assistant</p><p>创建一个新的 Docker 容器来运行 Home Assistant。运行以下命令：</p><p>docker run -d –name homeassistant -p 8123:8123 -v &#x2F;path&#x2F;to&#x2F;config:&#x2F;config homeassistant&#x2F;home-assistant</p><p>我的命令：docker run -d –name homeassistant -p 8123:8123 -v &#x2F;home&#x2F;wangyaoqi&#x2F;my-container&#x2F;my-ha-config:&#x2F;config homeassistant&#x2F;home-assistant</p><p>查看端口</p><p>ip 物理网卡查询进行访问都可以</p><p>进入首页：<br>配置网络：<br>一定先配置网络，有有线网卡的不用管<br>第一步：打开高级模式</p><p>第二步 重启系统，稍后进入系统：</p><p>坑：再来： docker必须重新安装容器才可以修改网络<br>删除docker重新安装<br>命令：<br>docker ps -a （查询容器ID）<br>停止容器<br>docker stop 容器ID<br>删除容器<br>docker em 容器ID</p><p>重新安装：先了解下docker的网络模式：<br>Docker 提供了几种网络模式来连接和隔离容器。下面是几种常见的 Docker 网络模式：</p><p>桥接网络（Bridge Network）：这是 Docker 默认的网络模式。在桥接网络中，容器连接到一个虚拟网桥，该网桥与主机的物理网络接口连接。容器可以相互通信，并可以使用主机上的端口映射到容器内部的端口。</p><p>主机网络（Host Network）：在主机网络模式中，容器与主机共享网络命名空间，直接使用主机的网络接口。这意味着容器可以使用主机上的所有网络接口和端口，不需要进行端口映射。但是，容器之间的网络隔离性较差。</p><p>none 网络（None Network）：在 none 网络模式中，容器没有网络连接。这意味着容器无法通过网络访问外部系统，也无法被外部系统访问。none 网络模式适用于特定的安全要求或仅需要本地访问的容器。</p><p>自定义网络（Custom Network）：Docker 还允许创建自定义网络，以便在容器之间创建专用的网络环境。自定义网络提供了更高级的网络功能，例如容器名称解析和容器发现。可以使用 Docker CLI 或 Docker Compose 来创建和管理自定义网络。</p><p>使用 Docker 默认的桥接网络可以满足大多数容器的网络需求。如果需要更复杂的网络配置或容器之间的通信，可以考虑使用自定义网络。</p><p>先查看下docker网络信息<br>docker network ls</p><p>查看特定网络的详细信息：<br>docker network inspect <network-name></network-name></p><p>学习了下doker的网络，那么我们选择host网络与主机一样，使用 –network host 参数将容器连接到主机网络，从而绕过 Docker 的网络虚拟化，并直接使用主机网络接口。<br>命令如下：<br>docker run -d –name homeassistant –network host -v &#x2F;home&#x2F;wangyaoqi&#x2F;my-container&#x2F;my-ha-config:&#x2F;config homeassistant&#x2F;home-assistant</p><p>开始配置吧</p><p>安装hacs，首先要有这个集成包，需要下载，目前的容器目录见截图</p><p>在我们安装容器的目录新建一个文件夹</p><p>刷新我们网站的后台；<a href="http://192.168.31.108:8123/config/dashboard">http://192.168.31.108:8123/config/dashboard</a>   端口号默认为8123</p><p>安装hacs集成：通过这个集成去下载更多的智能插件</p><p>我的hacs过期了可以git找 不过也不需要这个东西</p><p>我有本地小米包扩展，直接安装</p><p>接入小米账号，家里面如果有局域网 应该在开始的时候自动就会显示出网关<br>下一步，继续找到苹果的桥接程序添加集成，右侧通知扫码添加</p><p>暂时不开启外网访问，后续开启，用于在外面通过访问服务器进行控制家庭设备，但不是很友好，不方便，不能在家庭操作，准备购入homepad吧，对比了几款网关产品，pad不适合长时间使用，appletv家里没有电视不需要，选择homepad入手，目前二手价格在500左右，全新的700</p><p>DDNS解析华为云，找了很多，小米路由器无法自动解析，家里的网络不是大内网，什么是大内网，大内网就是外网ip无法ping通也就是无法解析了</p><p>开始去github上找项目，ddns-go安装部署很快<br>首先下载下来这个项目，我们开始有了思路<br>先创建一个自己喜欢的项目目录，比如my-ddns-server<br>开始创建</p><p>创建好后去github下载下来，准备部署服务记住</p><p>开始创建一个常驻脚本 不用nob 选择守护进程</p><p>首先安装下命令：<br>sudo apt-get install supervisor</p><p>&#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;这个目录为配置进程文件的目录，默认把ddns-go安装在这里<br>创建一个配置文件开始<br>sudo nano &#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;ddns-go.conf<br>配置文件内容：<br>[program:ddns-go]<br>command&#x3D;&#x2F;path&#x2F;to&#x2F;ddns-go          ; 替换为实际的 ddns-go 可执行文件路径<br>autostart&#x3D;true<br>autorestart&#x3D;true<br>stderr_logfile&#x3D;&#x2F;var&#x2F;log&#x2F;ddns-go.err.log<br>stdout_logfile&#x3D;&#x2F;var&#x2F;log&#x2F;ddns-go.out.log</p><p>保存并退出编辑器。<br>更新 supervisor 配置：<br>Copy code<br>sudo supervisorctl reread<br>sudo supervisorctl update</p><p>启动这个守护进程<br>sudo supervisorctl start ddns-go</p><p>默认是启动的不允许再启动</p><p>现在，ddns-go 将在后台以守护进程的方式运行。<br>查看守护进程的脚本：sudo supervisorctl status</p><p>重新启动命令：sudo supervisorctl restart ddns-go<br>服务地址：端口为7896：<br><a href="http://192.168.31.108:9876/">http://192.168.31.108:9876/</a></p><p>安装一个媒体库<br>Jellyfin   官方文档：8096</p><p>搜索docker资源<br>sudo docker search XXX<br> 复制资源到docker中<br>sudo docker cp &#x2F;path&#x2F;to&#x2F;source&#x2F;file_or_directory container_name:&#x2F;path&#x2F;to&#x2F;destination</p><p>安装一个nastool 端口为3000s</p><p>安装naslab 调研后清晰好用<br>docker run -d –name nascab –network host -v &#x2F;home&#x2F;wangyaoqi&#x2F;my-container&#x2F;my-nascab-config:&#x2F;config -v &#x2F;DATE:&#x2F;media  ypptec&#x2F;nascab</p><p>Lsblk 磁盘路径查</p><p>磁盘挂在将新安装的硬盘挂载到 &#x2F;datefile 目录，您可以按照以下步骤进行操作：</p><p>首先，创建一个用于挂载的目标文件夹，例如 &#x2F;datefile：</p><p>sudo mkdir &#x2F;datefile<br>然后，使用 mount 命令将 sdb2 分区挂载到 &#x2F;datefile 目录：</p><p>sudo mount &#x2F;dev&#x2F;sdb2 &#x2F;datefile<br>在这个命令中，&#x2F;dev&#x2F;sdb2 是新硬盘上的分区路径，&#x2F;datefile 是您想要将其挂载到的目标文件夹。</p><p>如果您希望每次系统启动时都自动挂载该硬盘分区，可以将其添加到 &#x2F;etc&#x2F;fstab 文件中。编辑 &#x2F;etc&#x2F;fstab 文件，并在文件末尾添加以下一行：</p><p>&#x2F;dev&#x2F;sdb2  &#x2F;datefile  ext4  defaults  0  2<br>这会告诉系统在启动时自动将 sdb2 分区挂载到 &#x2F;datefile 目录，并使用默认的 ext4 文件系统选项。请确保将文件系统类型（ext4）替换为您实际使用的文件系统类型。<br>保存并关闭 &#x2F;etc&#x2F;fstab 文件。<br>完成挂载后，您可以通过访问 &#x2F;datefile 目录来查看和使用新硬盘上的内容。<br>请注意，在执行挂载命令时，确保您具有足够的权限（使用 sudo）和正确的分区路径。确保已创建的目标文件夹存在，并且挂载点路径是正确的。</p><p>关于服务器监控温度，因服务器是迷你主机，发热严重，需观察，所需下载sensors软件包安装<br>sudo apt-get install lm-sensors</p><p>网络net解决方法：<br>光猫拨号无法net，想观察网络是不是光猫账号权限问题，通过telnet连入光猫ip，输入admin admin 访问终端，通过终端控制查看命令行：CUAdmin为命令  CUAdmin get 获取超级管理账号密码  </p><p>新问题：<br>管理员页面无法没有正常打开，无法查看权限，那么修改桥接</p><p>Df -h 查询磁盘目录<br> umount &#x2F;datefile <br>卸载挂在</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jira 容器化部署</title>
      <link href="/2024/07/13/My-Three-Post/"/>
      <url>/2024/07/13/My-Three-Post/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Jira-容器化部署一键"><a href="#使用-Jira-容器化部署一键" class="headerlink" title="使用 Jira 容器化部署一键"></a>使用 Jira 容器化部署一键</h1><h2 id="Jira"><a href="#Jira" class="headerlink" title="Jira"></a>Jira</h2><p>团队项目协作，出色的工作流与插件</p><h2 id="安装文档"><a href="#安装文档" class="headerlink" title="安装文档"></a>安装文档</h2><p><a href="https://github.com/haxqer/jira/blob/rm/README_zh.md">https://github.com/haxqer/jira/blob/rm/README_zh.md</a></p><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><p>jira<br>README | 中文文档</p><p>Long Term Support Version: v9.12.11<br>Latest Version: v9.17.0<br>新的使用方式 ，您可方便自行升级、修改各参数，支持https (感谢 xsharp).<br>Arm Version<br>新的Confluence&#x2F;Jira版本仅支持数据中心许可证</p><p>默认端口: 8080</p><p>环境要求<br>docker: 17.09.0+<br>docker-compose: 1.24.0+<br>使用 docker-compose 启动 jira<br>启动 jira &amp; mysql<br>    git clone <a href="https://github.com/haxqer/jira.git">https://github.com/haxqer/jira.git</a> <br>        &amp;&amp; cd jira <br>        &amp;&amp; git checkout rm <br>        &amp;&amp; docker-compose pull <br>        &amp;&amp; docker-compose up<br>以守护进程的方式启动 jira &amp; mysql<br>    docker-compose up -d<br>默认的 数据库(mysql8.0) 配置:<br>    driver&#x3D;mysql8.0<br>    host&#x3D;mysql-jira<br>    port&#x3D;3306<br>    db&#x3D;jira<br>    user&#x3D;root<br>    passwd&#x3D;123456<br>使用 docker 启动<br>启动 jira<br>    docker volume create jira_home_data &amp;&amp; docker network create jira-network &amp;&amp; docker run -p 8080:8080 -v jira_home_data:&#x2F;var&#x2F;jira –network jira-network –name jira-srv -e TZ&#x3D;’Asia&#x2F;Shanghai’ haxqer&#x2F;jira:9.17.0<br>然后配置你的数据库<br>破解 jira<br>docker exec jira-srv java -jar &#x2F;var&#x2F;agent&#x2F;atlassian-agent.jar <br>    -p jira <br>    -m <a href="mailto:&#72;&#x65;&#108;&#108;&#x6f;&#64;&#119;&#111;&#x72;&#108;&#x64;&#46;&#99;&#111;&#x6d;">&#72;&#x65;&#108;&#108;&#x6f;&#64;&#119;&#111;&#x72;&#108;&#x64;&#46;&#99;&#111;&#x6d;</a> <br>    -n <a href="mailto:&#x48;&#x65;&#108;&#x6c;&#111;&#64;&#x77;&#111;&#114;&#108;&#100;&#x2e;&#99;&#x6f;&#x6d;">&#x48;&#x65;&#108;&#x6c;&#111;&#64;&#x77;&#111;&#114;&#108;&#100;&#x2e;&#99;&#x6f;&#x6d;</a> <br>    -o your-org <br>    -s you-server-id-xxxx<br>初次安装 jira 时，安装页面会显示你的 server-id</p><p>破解 jira 的插件<br>例如: 你想要破解 BigGantt 插件<br>从 jira marketplace 中安装 BigGantt 插件<br>查看 BigGantt 的 App Key 是 : eu.softwareplant.biggantt<br>然后执行 :<br>docker exec jira-srv java -jar &#x2F;var&#x2F;agent&#x2F;atlassian-agent.jar <br>    -p eu.softwareplant.biggantt <br>    -m <a href="mailto:&#x48;&#x65;&#108;&#108;&#x6f;&#x40;&#119;&#111;&#114;&#x6c;&#100;&#x2e;&#x63;&#111;&#109;">&#x48;&#x65;&#108;&#108;&#x6f;&#x40;&#119;&#111;&#114;&#x6c;&#100;&#x2e;&#x63;&#111;&#109;</a> <br>    -n <a href="mailto:&#x48;&#x65;&#x6c;&#x6c;&#111;&#64;&#x77;&#x6f;&#114;&#108;&#x64;&#x2e;&#x63;&#x6f;&#109;">&#x48;&#x65;&#x6c;&#x6c;&#111;&#64;&#x77;&#x6f;&#114;&#108;&#x64;&#x2e;&#x63;&#x6f;&#109;</a> <br>    -o your-org <br>    -s you-server-id-xxxx<br>在 System -&gt; System Info 页面的 Server ID 字段即为你的 server-id</p><p>例如:</p><p>docker exec jira-srv java -jar &#x2F;var&#x2F;agent&#x2F;atlassian-agent.jar <br>    -p eu.softwareplant.biggantt <br>    -m <a href="mailto:&#x48;&#101;&#x6c;&#x6c;&#x6f;&#64;&#119;&#x6f;&#114;&#108;&#100;&#x2e;&#x63;&#x6f;&#x6d;">&#x48;&#101;&#x6c;&#x6c;&#x6f;&#64;&#119;&#x6f;&#114;&#108;&#100;&#x2e;&#x63;&#x6f;&#x6d;</a> <br>    -n <a href="mailto:&#72;&#101;&#x6c;&#108;&#111;&#x40;&#119;&#x6f;&#114;&#x6c;&#100;&#46;&#x63;&#x6f;&#x6d;">&#72;&#101;&#x6c;&#108;&#111;&#x40;&#119;&#x6f;&#114;&#x6c;&#100;&#46;&#x63;&#x6f;&#x6d;</a> <br>    -o <a href="https://jira.haxqer.cm/">https://jira.haxqer.cm</a> <br>    -s BSFN-Q264-VGCZ-0AOE<br>最后粘贴生成的 licence<br>Datacenter license<br>添加 -d 参数即可生成 datacenter license</p><p>docker exec jira-srv java -jar &#x2F;var&#x2F;agent&#x2F;atlassian-agent.jar <br>    -d <br>    -p jira <br>    -m <a href="mailto:&#x48;&#101;&#x6c;&#108;&#x6f;&#x40;&#x77;&#111;&#x72;&#x6c;&#100;&#46;&#99;&#x6f;&#x6d;">&#x48;&#101;&#x6c;&#108;&#x6f;&#x40;&#x77;&#111;&#x72;&#x6c;&#100;&#46;&#99;&#x6f;&#x6d;</a> <br>    -n <a href="mailto:&#72;&#101;&#108;&#108;&#111;&#x40;&#x77;&#111;&#x72;&#108;&#100;&#x2e;&#x63;&#111;&#x6d;">&#72;&#101;&#108;&#108;&#111;&#x40;&#x77;&#111;&#x72;&#108;&#100;&#x2e;&#x63;&#111;&#x6d;</a> <br>    -o your-org <br>    -s you-server-id-xxxx<br>如何升级<br>cd jira &amp;&amp; git pull<br>docker pull haxqer&#x2F;jira:rm &amp;&amp; docker-compose stop<br>docker-compose rm<br>输入 y 之后重启 jira:</p><p>docker-compose up -d<br>Arm<br>已经测试过的机器:</p><p>Mac mini(M1,2020)<br>感谢:</p><p>odidev 提供的 arm image.<br>    git clone <a href="https://github.com/haxqer/jira.git">https://github.com/haxqer/jira.git</a> <br>        &amp;&amp; cd jira <br>        &amp;&amp; git checkout rm &amp;&amp; cd lts_arm <br>        &amp;&amp; docker-compose pull <br>        &amp;&amp; docker-compose up<br>破解 Jira Service Management(jsm)<br>感谢:</p><p>d1m0nstr for Jira Service Management<br>docker exec jira-srv java -jar &#x2F;var&#x2F;agent&#x2F;atlassian-agent.jar <br>    -p jsm <br>    -m <a href="mailto:&#x48;&#x65;&#108;&#108;&#x6f;&#x40;&#x77;&#111;&#x72;&#108;&#100;&#46;&#99;&#x6f;&#109;">&#x48;&#x65;&#108;&#108;&#x6f;&#x40;&#x77;&#111;&#x72;&#108;&#100;&#46;&#99;&#x6f;&#109;</a> <br>    -n <a href="mailto:&#72;&#x65;&#108;&#x6c;&#x6f;&#64;&#x77;&#111;&#x72;&#x6c;&#x64;&#x2e;&#x63;&#x6f;&#x6d;">&#72;&#x65;&#108;&#x6c;&#x6f;&#64;&#x77;&#111;&#x72;&#x6c;&#x64;&#x2e;&#x63;&#x6f;&#x6d;</a> <br>    -o your-org&#x2F; <br>    -s you-server-id</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 部署笔记</title>
      <link href="/2024/06/29/My-Two-Post/"/>
      <url>/2024/06/29/My-Two-Post/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-部署笔记"><a href="#Docker-部署笔记" class="headerlink" title="Docker 部署笔记"></a>Docker 部署笔记</h1><h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><p>Docker 是一种广泛使用的容器化平台，可以在开发、测试和生产环境中轻松部署和管理应用程序。以下是从 Windows 和 Linux 系统上安装 Docker 的步骤及其原理的详细梳理。</p><h2 id="老话，说说我为什么要掌握Docker"><a href="#老话，说说我为什么要掌握Docker" class="headerlink" title="老话，说说我为什么要掌握Docker?"></a>老话，说说我为什么要掌握Docker?</h2><p>Docker 已成为现代 IT 和开发环境中不可或缺的工具。对于我的职业发展和个人兴趣来说，掌握 Docker 具有显著的优势，尤其是在涉及技术环境部署、物联网、智能化设备以及 NAS 系统时。以下是我认为更详细的原因：</p><h3 id="1-职业发展需求：技术环境的部署和管理"><a href="#1-职业发展需求：技术环境的部署和管理" class="headerlink" title="1. 职业发展需求：技术环境的部署和管理"></a>1. 职业发展需求：技术环境的部署和管理</h3><pre><code>1.1. 高效的环境部署一致性：Docker 容器确保在开发、测试和生产环境中运行的应用程序具有一致性，无论底层环境如何变化。隔离性：每个容器独立运行，避免不同应用之间的冲突和依赖问题。快速启动：容器的轻量级特性使得启动速度非常快，便于快速部署和迭代。1.2. 易于扩展和管理弹性扩展：Docker 容器可以轻松地横向扩展，满足应用程序的负载需求。便捷的更新：通过镜像管理和版本控制，可以快速更新和回滚应用程序，简化维护工作。1.3. 强大的生态系统丰富的工具和服务：Docker 提供了从开发到部署的一整套工具，支持与 CI/CD 流水线、编排系统（如 Kubernetes）的无缝集成。社区支持：大量的开源项目和社区支持，使得 Docker 生态系统不断发展和完善。</code></pre><h3 id="2-个人兴趣与物联网、智能化设备"><a href="#2-个人兴趣与物联网、智能化设备" class="headerlink" title="2. 个人兴趣与物联网、智能化设备"></a>2. 个人兴趣与物联网、智能化设备</h3><pre><code>2.1. 快速试验和开发轻量化：Docker 容器可以在资源有限的设备上高效运行，适用于物联网和智能化设备的开发与部署。灵活性：无需修改底层操作系统，就可以在 Docker 容器中运行不同的服务和应用，方便测试和实验。2.2. 多样化的应用场景跨平台兼容性：Docker 支持在不同硬件架构上运行，适用于各种物联网设备和嵌入式系统。模块化：通过容器化，能将不同的功能模块化，便于管理和更新，提升开发效率。</code></pre><h3 id="3-NAS-系统中的最佳选择"><a href="#3-NAS-系统中的最佳选择" class="headerlink" title="3. NAS 系统中的最佳选择"></a>3. NAS 系统中的最佳选择</h3><pre><code>3.1. 轻松部署与管理简化复杂性：NAS（网络附加存储）设备通常用于家庭或小型办公室环境，Docker 可以简化这些设备上的应用部署过程。快速安装：通过 Docker，可以快速安装和配置各种常用的应用和服务，如文件共享、媒体服务器、数据库等。3.2. 高效资源利用低资源占用：相比传统的虚拟机，Docker 容器更加轻量，能更好地利用 NAS 设备的资源。并发运行：在同一个 NAS 上，可以同时运行多个 Docker 容器，满足多种应用需求。3.3. 灵活的扩展和升级动态调整：根据需要，随时可以增加或删除容器，灵活调整系统功能和容量。无缝升级：通过更新容器镜像，可以轻松完成系统和应用的升级，而无需重启整个 NAS 系统。</code></pre><h2 id="Docker-原理"><a href="#Docker-原理" class="headerlink" title="Docker 原理"></a>Docker 原理</h2><p>Docker 利用操作系统级别的虚拟化技术来提供软件容器，使得应用程序可以在隔离的环境中运行。我曾经探讨及查看，在宿主机中docker每一个启动容器都是一个现成一个信号，所以首先我们要了解主要的核心组件和概念包括：</p><h3 id="1-Docker-镜像（Image）"><a href="#1-Docker-镜像（Image）" class="headerlink" title="1. Docker 镜像（Image）"></a>1. Docker 镜像（Image）</h3><p>定义：只读的模板，包含运行应用程序所需的一切，包括代码、库、环境变量等。[目前如果不科学上网，就多看看B站吧，从2024-06-07号开始，链路国外镜像源逐渐的不能用了<br>，后续再记录怎样替换镜像源，一言难尽]作用：用于创建 Docker 容器。</p><h3 id="2-Docker-容器（Container）"><a href="#2-Docker-容器（Container）" class="headerlink" title="2. Docker 容器（Container）"></a>2. Docker 容器（Container）</h3><p>定义：由镜像实例化而来的一个运行环境，是一个轻量级、独立的可执行包。<br>作用：确保应用程序及其依赖可以在任何环境下稳定运行。</p><h3 id="3-Docker-引擎（Docker-Engine）-Docker的软件及命令应用，在宿主机中会显示"><a href="#3-Docker-引擎（Docker-Engine）-Docker的软件及命令应用，在宿主机中会显示" class="headerlink" title="3. Docker 引擎（Docker Engine） [Docker的软件及命令应用，在宿主机中会显示]"></a>3. Docker 引擎（Docker Engine） [Docker的软件及命令应用，在宿主机中会显示]</h3><p>定义：Docker 的核心组件，包含 Docker 守护进程（Docker Daemon）、REST API 接口和命令行工具（CLI）。<br>作用：负责管理 Docker 容器和镜像。</p><h3 id="4-Docker-文件（Dockerfile）-Docker既然是个容器，我可以通过这个方式构建脚本化生成我需要的容器运行逻辑"><a href="#4-Docker-文件（Dockerfile）-Docker既然是个容器，我可以通过这个方式构建脚本化生成我需要的容器运行逻辑" class="headerlink" title="4. Docker 文件（Dockerfile）[Docker既然是个容器，我可以通过这个方式构建脚本化生成我需要的容器运行逻辑]"></a>4. Docker 文件（Dockerfile）[Docker既然是个容器，我可以通过这个方式构建脚本化生成我需要的容器运行逻辑]</h3><p>定义：一个文本文件，包含一系列指令，用于定义如何构建 Docker 镜像。<br>作用：通过自动化的方式生成定制化的镜像。</p><h3 id="5-Docker-Compose-配置文件一样的存在"><a href="#5-Docker-Compose-配置文件一样的存在" class="headerlink" title="5. Docker Compose  [配置文件一样的存在]"></a>5. Docker Compose  [配置文件一样的存在]</h3><p>定义：用于定义和运行多容器 Docker 应用的工具。<br>作用：通过一个 YAML 文件来配置应用程序的服务、网络和卷。<br>二、Windows 系统上安装 Docker</p><ol><li>安装前的准备<br>系统要求：Windows 10 64-bit: Pro, Enterprise, or Education 版本，1903 或更高版本；或 Windows Server 2019。<br>硬件要求：启用硬件虚拟化（Intel VT-x 或 AMD-V）。</li><li>安装步骤<br>2.1. 下载 Docker Desktop<br>访问<a href="https://www.docker.com/"> Docker 官网</a>下载安装包，mac操作系统直接下载dmg安装包。<br>下载适用于 Windows 的 Docker Desktop 安装程序。<br>2.2. 安装 Docker Desktop<br>双击安装包并按照提示完成安装。<br>在安装过程中，可以选择安装 WSL 2（适用于更高效的 Linux 容器运行）。<br>2.3. 配置 Docker Desktop<br>安装完成后，启动 Docker Desktop。<br>初次启动时，选择使用 WSL 2 还是 Hyper-V 作为后台支持。<br>完成基本配置，确保 Docker Desktop 已正常运行（图标应显示在系统托盘中）。<br>2.4. 验证安装<br>打开命令提示符或 PowerShell，运行以下命令验证 Docker 安装：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version  <span class="comment">#显示 Docker 版本信息。</span></span><br></pre></td></tr></table></figure>运行测试容器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world  <span class="comment">#如果看到 &quot;Hello from Docker!&quot; 的输出，则说明 Docker 已成功安装和配置。</span></span><br></pre></td></tr></table></figure>三、Linux 系统上安装 Docker</li><li>安装前的准备<br>系统要求：现代的 Linux 发行版，通常建议使用最新的版本。<br>权限要求：需要具有 sudo 或 root 权限来安装和管理 Docker。</li><li>安装步骤<br>2.1. 更新包管理器[Ubuntu apt管理器  ]<br>使用以下命令更新系统的包管理器（以 Ubuntu 为例）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  <span class="comment">#如果看到 &quot;Hello from Docker!&quot; 的输出，则说明 Docker 已成功安装和配置。</span></span><br></pre></td></tr></table></figure>2.2. 安装必要的依赖<br>安装依赖包，确保系统支持 HTTPS：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>2.3. 添加 Docker GPG 密钥<br>使用以下命令添加 Docker 官方的 GPG 密钥：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>2.4. 添加 Docker 仓库<br>添加 Docker 的 APT 仓库：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure>2.5. 安装 Docker CE<br>更新包管理器，并安装 Docker CE（Community Edition）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>2.6. 启动并验证 Docker<br>启动 Docker 服务：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>验证 Docker 安装：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker --version  <span class="comment">#显示 Docker 版本信息。</span></span><br></pre></td></tr></table></figure>运行测试容器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world  <span class="comment">#如果看到 &quot;Hello from Docker!&quot; 的输出，则说明 Docker 已成功安装和配置。</span></span><br></pre></td></tr></table></figure>2.7. （可选,但我一般都配置下方便，如果主机为业务机就不配置了）配置非 root 用户运行 Docker<br>创建 Docker 用户组，并将当前用户添加到组中：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>退出并重新登录，以应用组更改。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> docker 部署 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/27/hello-world/"/>
      <url>/2024/06/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo 项目并在 GitHub 上部署指南</title>
      <link href="/2022/03/02/My-First-Post/"/>
      <url>/2022/03/02/My-First-Post/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Hexo-项目并在-GitHub-上部署指南"><a href="#使用-Hexo-项目并在-GitHub-上部署指南" class="headerlink" title="使用 Hexo 项目并在 GitHub 上部署指南"></a>使用 Hexo 项目并在 GitHub 上部署指南</h1><h2 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h2><p>Hexo 是一个快速、简洁且高效的博客框架，基于 Node.js 开发，适用于个人和团队博客的搭建。</p><h2 id="我为什么选择Hexo-作为博客框架的搭建"><a href="#我为什么选择Hexo-作为博客框架的搭建" class="headerlink" title="我为什么选择Hexo,作为博客框架的搭建"></a>我为什么选择Hexo,作为博客框架的搭建</h2><p>原因：近期在使用air2软件的服务中，相关bt离线服务无法正常下载，在google搜索后发现了一个对该问题分析原因的网站[网站地址]（<a href="https://p3terx.com/">https://p3terx.com/</a> “p3terx”），点了点，加载响应超级快，体验感觉非常好，我就希望我的博客主站就用这个来做吧，那么是怎么做呢，先通过openai的chatgpt 进行交互，了解到网站是由Hexo 及butterfly主题来生成的。那么我决定来搭建一个属于个人的博客网站。</p><h2 id="步骤一：安装-Hexo"><a href="#步骤一：安装-Hexo" class="headerlink" title="步骤一：安装 Hexo"></a>步骤一：安装 Hexo</h2><ol><li><p><strong>前置：本地服务一定有 Node.js 和 npm</strong></p><ul><li>访问 <a href="https://nodejs.org/">Node.js 官网</a> 下载并安装最新版本的 Node.js。</li><li>npm 会随 Node.js 一同安装。</li></ul></li><li><p><strong>安装 Hexo</strong></p><ul><li>npm install -g hexo-cli</li><li>hexo init myblog</li></ul></li><li><p><strong>hexo的一些指令及文件格式介绍</strong></p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init <span class="comment">#命令用于初始化一个本地文件夹为网站的根目录</span></span><br><span class="line">$ hexo new title <span class="comment">#新建一篇文章</span></span><br><span class="line">$ hexo generate <span class="comment">#可以简写成 hexo g该命令用于生成静态文件</span></span><br><span class="line">$ hexo server <span class="comment">#命令用于启动本地服务器，一般可以简写成 hexo s</span></span><br><span class="line">   <span class="comment">#可以加一些参数</span></span><br><span class="line">      -p    <span class="comment">#选项 ，指定服务器端口，默认为 4000</span></span><br><span class="line">      -i    <span class="comment">#选项，指定服务器 IP 地址，默认为 0.0.0.0</span></span><br><span class="line">      -s    <span class="comment">#选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</span></span><br><span class="line">$ hexo deploy <span class="comment">#命令用于部署网站，一般可以简写成 hexo d (这个基本就是推送部署到指定位置)</span></span><br><span class="line">$ hexo clean <span class="comment">#命令用于清理缓存文件，是一个比较常用的命令</span></span><br><span class="line">$ hexo --safe <span class="comment">#表示安全模式，用于禁用加载插件和脚本</span></span><br><span class="line">$ hexo --debug <span class="comment">#表示调试模式，用于将消息详细记录到终端和 debug.log 文件</span></span><br><span class="line">$ hexo --silent  <span class="comment">#表示静默模式，用于静默输出到终端</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="步骤二：配置主题与文件目录"><a href="#步骤二：配置主题与文件目录" class="headerlink" title="步骤二：配置主题与文件目录"></a>步骤二：配置主题与文件目录</h2><ol><li><strong>Butterfly主题下载</strong><br>-项目根目录下安装 Butterfly 主题   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-theme-butterfly</span><br></pre></td></tr></table></figure>-配置文件<blockquote><p>hexo配置文件<br>   -项目根目录：_config.yml<br>   -找到 theme 配置项，将其值改为 butterfly：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></p></blockquote></li><li><strong>Butterfly 主题配置</strong><br>-Butterfly 主题有自己的配置文件 _config.butterfly.yml，通常在 themes&#x2F;butterfly&#x2F; 目录下。<blockquote><p>_config.butterfly.yml<br>   -网站基本信息：如标题、描述、语言等。<br>   -菜单和导航栏：定义导航栏中的菜单项。<br>   -外观：如主题颜色、字体、背景图等。<br>   -插件和小工具：如搜索功能、标签云、分类、最近文章等。</p></blockquote></li></ol><h3 id="撰写文章"><a href="#撰写文章" class="headerlink" title="撰写文章"></a>撰写文章</h3><ol><li><strong>Hexo 使用 Markdown 格式来撰写文章。</strong><ul><li>手动创建：在 source&#x2F;_posts&#x2F; 目录下，1.可以创建一个新的 Markdown 文件：**.md</li><li>自动创建： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new todaynode <span class="comment">#新建一篇文章</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="步骤三：hexo部署：配置-Git"><a href="#步骤三：hexo部署：配置-Git" class="headerlink" title="步骤三：hexo部署：配置 Git"></a>步骤三：hexo部署：配置 Git</h2><ol><li><p><strong>在 GitHub 上创建仓库主站。</strong></p><ul><li>登录 GitHub，创建一个新的空仓库，例如 username.github.io（其中 username 是你的 GitHub 用户名）。</li></ul></li><li><p><strong>hexo 部署</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  <span class="comment">#该命令用于生成静态文件  public </span></span><br></pre></td></tr></table></figure><ul><li>在 Hexo 项目根目录下，安装 hexo-deployer-git 插件</li><li>配置 _config.yml 文件，添加部署设置： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ deploy:</span><br><span class="line">   <span class="built_in">type</span>: git</span><br><span class="line">   repo: https://github.com/your-username/your-repo.git</span><br><span class="line">   branch: main</span><br></pre></td></tr></table></figure></li><li>配置 Git<blockquote><p>使用 SSH 密钥认证：<br>   生成 SSH 密钥：如果你还没有 SSH 密钥，可以使用以下命令生成：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制代码</span></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"><span class="comment">#按照提示一路回车，生成密钥对。</span></span><br><span class="line"><span class="comment">#添加 SSH 密钥到 GitHub：</span></span><br><span class="line"><span class="comment">#复制你的 SSH 公钥：</span></span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub  <span class="comment">#(ssh 目录)</span></span><br><span class="line"><span class="comment">#将公钥添加到 GitHub 的 SSH 设置中。</span></span><br><span class="line"><span class="comment">#登录 GitHub，转到 Settings -&gt; SSH and GPG keys -&gt; New SSH key，将复制的公钥粘贴到 Key 文本框中，然后点击 Add SSH key。</span></span><br></pre></td></tr></table></figure></p></blockquote></li><li>推送 hexo d <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d  <span class="comment">#会自动推送public目录下的文件到git </span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="其它GIT相关"><a href="#其它GIT相关" class="headerlink" title="其它GIT相关"></a>其它GIT相关</h3><ul><li>使用git 托管工具推送部署到 GitHub Pages</li><li>Git 基本操作<blockquote><pre><code> git info   初始化 git remote add origin git@github.com:wangyaoqi/wangyaoqi.github.io.git        设置远程仓库 git remote -v  确认 origin 远程仓库 git add .  #提交更改到本地仓库 git commit -m &quot;提交说明&quot;    git push origin main      #推送本地更改到远程仓库 git checkout main   #切换分支 git pull origin main  #拉取分支变更 git merge my-new-branch  #合并分支 git merge my-new-branch --allow-unrelated-histories  #强制合并  前提已在主分支下</code></pre></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

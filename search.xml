<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>海康企业流媒体rtsp流转发</title>
      <link href="/2024/08/28/My-six-Post/"/>
      <url>/2024/08/28/My-six-Post/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步：了解海康微视的端口"><a href="#第一步：了解海康微视的端口" class="headerlink" title="第一步：了解海康微视的端口"></a>第一步：了解海康微视的端口</h2><h3 id="1-去硬盘录像机的后台"><a href="#1-去硬盘录像机的后台" class="headerlink" title="1.去硬盘录像机的后台"></a>1.去硬盘录像机的后台</h3><p>主要原因有两个：</p><ul><li>创建账户</li><li>重置账户</li></ul><h3 id="2-录像机的后台关于账户密码开启端口映射"><a href="#2-录像机的后台关于账户密码开启端口映射" class="headerlink" title="2. 录像机的后台关于账户密码开启端口映射"></a>2. 录像机的后台关于账户密码开启端口映射</h3><p>首先了解海康超级密码，也可以拨打客服进行咨询，只要能进入录像机配置就不会发生变更，选择恢复简单的配置等待机器重启后即可重置密码，前提需要知道图形或者某密码进入后台否则只能重新配置目前没有重置所有的操作也不考虑了</p><h3 id="3-端口映射方式"><a href="#3-端口映射方式" class="headerlink" title="3. 端口映射方式"></a>3. 端口映射方式</h3><p>选择端口映射即可，关于upnp一般不是单独的专线或者拨号，所以不用考虑，结合实际场景，端口映射端口转发  看下rtsp流媒体协议端口一般为554  内网不用重置</p><h3 id="4-部署服务机器"><a href="#4-部署服务机器" class="headerlink" title="4. 部署服务机器"></a>4. 部署服务机器</h3><h2 id="RTSPtoWeb-是一个非常实用的工具，用于将-RTSP-流转换为-WebRTC-或-HLS-格式，方便通过网页浏览器进行播放。以下是如何安装和使用-RTSPtoWeb-的步骤：docker-中找到rtsptoweb的协议，这样就可以自己定制前端页面用来实现流媒体服务了，先了解下教程怎么部署-访问rtsptoweb官网进行文件下载，go语言编辑，我们先把服务配置文件下载到本地或者：docker-run-–rm-it-p-8083-8083-aler9-rtsp-to-web关于rtsptoweb-也可以去官网了解下，docker-run-不一定下载下来，可以下载github源文件生成dockerfile-注意依赖项目有一些咨询也需要安装，最后文件映射即可-最后docker-compose-up-d-部署成功-完美"><a href="#RTSPtoWeb-是一个非常实用的工具，用于将-RTSP-流转换为-WebRTC-或-HLS-格式，方便通过网页浏览器进行播放。以下是如何安装和使用-RTSPtoWeb-的步骤：docker-中找到rtsptoweb的协议，这样就可以自己定制前端页面用来实现流媒体服务了，先了解下教程怎么部署-访问rtsptoweb官网进行文件下载，go语言编辑，我们先把服务配置文件下载到本地或者：docker-run-–rm-it-p-8083-8083-aler9-rtsp-to-web关于rtsptoweb-也可以去官网了解下，docker-run-不一定下载下来，可以下载github源文件生成dockerfile-注意依赖项目有一些咨询也需要安装，最后文件映射即可-最后docker-compose-up-d-部署成功-完美" class="headerlink" title="RTSPtoWeb 是一个非常实用的工具，用于将 RTSP 流转换为 WebRTC 或 HLS 格式，方便通过网页浏览器进行播放。以下是如何安装和使用 RTSPtoWeb 的步骤：docker 中找到rtsptoweb的协议，这样就可以自己定制前端页面用来实现流媒体服务了，先了解下教程怎么部署-.访问rtsptoweb官网进行文件下载，go语言编辑，我们先把服务配置文件下载到本地或者：docker run –rm -it -p 8083:8083 aler9&#x2F;rtsp-to-web关于rtsptoweb  也可以去官网了解下，docker run 不一定下载下来，可以下载github源文件生成dockerfile 注意依赖项目有一些咨询也需要安装，最后文件映射即可 最后docker compose up d 部署成功 完美"></a>RTSPtoWeb 是一个非常实用的工具，用于将 RTSP 流转换为 WebRTC 或 HLS 格式，方便通过网页浏览器进行播放。以下是如何安装和使用 RTSPtoWeb 的步骤：<br>docker 中找到rtsptoweb的协议，这样就可以自己定制前端页面用来实现流媒体服务了，先了解下教程怎么部署<br>-.访问rtsptoweb官网进行文件下载，go语言编辑，我们先把服务配置文件下载到本地<br>或者：docker run –rm -it -p 8083:8083 aler9&#x2F;rtsp-to-web<br>关于rtsptoweb  也可以去官网了解下，docker run 不一定下载下来，可以下载github源文件生成dockerfile 注意依赖项目有一些咨询也需要安装，最后文件映射即可 最后docker compose up d 部署成功 完美</h2><h2 id="5-部署服务机器"><a href="#5-部署服务机器" class="headerlink" title="5. 部署服务机器"></a>5. 部署服务机器</h2><p>了解海康媒体流配置<br><a href="https://knowbot.hikvision.com/webchatbot-new/#/sharingPathMob?lang=zh_CN&params=379485&sysNum=1693447044565">https://knowbot.hikvision.com/webchatbot-new/#/sharingPathMob?lang=zh_CN&amp;params=379485&amp;sysNum=1693447044565</a></p><h2 id="遇到了一个奇葩的问题，这个问题一度让我认为这个事情做的不成功，不完美"><a href="#遇到了一个奇葩的问题，这个问题一度让我认为这个事情做的不成功，不完美" class="headerlink" title="遇到了一个奇葩的问题，这个问题一度让我认为这个事情做的不成功，不完美"></a>遇到了一个奇葩的问题，这个问题一度让我认为这个事情做的不成功，不完美</h2><p>说说后来怎么发现发现问题与解决思路吧，也帮助有幸浏览到这篇文章的同学避避坑<br>遇到一个什么问题呢，通过主机服务端口映射出去的视频，没办法通过hls与hlss播放，websocket也无法正常播放，为什么。但是通过内网加载ip是正常的<br>查找原因：期间我使用了obs获取的流，内网正常显示，一样外部端口无法获取成功<br>排查方式：一开始我以为端口映射问题，想使用upnp，但是upnp 企业路由器不支持，又去查看dmz方式一对一映射，结果还是不行，在h3c路由器的配置中有一个nat配置下针对rtsp协议的配置，但是这个是默认开启的，经过了解协议与端口，发现配置均没有问题，继续排查吧，下载vlc播放试试，一开始我认为obs这个插件就够强大了，但是我是在h3c也就是我的路由器的问题论坛中快问快答一个网友回复我的，那我用vlc试试看，果真可以正常播放，但是加载慢比内网中慢了很多但连的通就不是配置问题，所以不得不让我怀疑是数据流的问题，那么我的视频流媒体是什么样子的呢，h265编码是在硬盘录像机的协议  相对于h265咱也不是很清楚，应该新版本必究版本呢好，应该兼容才对，所以没有修改h265的编码，继续排查，在对流媒体中有个简单的方式调试ffmpeg仅,<br>brew update<br>brew upgrade ffmpeg<br>那就简单的获取试试，看看有无可用的连接不上的信息可以供我解决，<br>ffmpeg -i rtsp:&#x2F;&#x2F;留信息&#x2F;Streaming&#x2F;Channels&#x2F;101 -vf scale&#x3D;1280:720 -c:v libx264 -c:a aac output.mp4  指定了尺寸的<br>ffmpeg -loglevel debug -analyzeduration 30M -probesize 30M -i rtsp:&#x2F;&#x2F;******&#x2F;Streaming&#x2F;Channels&#x2F;101  加了缓存的</p><p>ffmpeg -loglevel debug -analyzeduration 30M -probesize 30M -i rtsp:&#x2F;&#x2F;XXXX4&#x2F;Streaming&#x2F;Channels&#x2F;101  指定tcp端口的<br>以上都是请求半天无响应，最后换了如下<br>ffmpeg -i rtsp:&#x2F;********、Streaming&#x2F;Channels&#x2F;101 -c:v libx264 -c:a aac output.mp4   转码格式的  libx264</p><p>最后发现libx264 有戏，那么问题就已经找到了,可能是格式不支持或者265对数据传输要求校稿，我的媒体播放器不支持导致</p><p>修改视频编码在海康录像机的通道h265的编码 替换h264，利用rtsptoweb webview debug  成功解决了！！！！！</p><h2 id="前端连接"><a href="#前端连接" class="headerlink" title="前端连接"></a>前端连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=<span class="string">&quot;border: 1cap;block-size: auto;font-size: large;font-weight: 100;&quot;</span>&gt;Test&lt;/div&gt;</span><br><span class="line">  &lt;div class=<span class="string">&quot;video-player-container&quot;</span>&gt;</span><br><span class="line">    &lt;div :class=<span class="string">&quot;[&#x27;sidebar&#x27;, &#123; &#x27;sidebar-collapsed&#x27;: !isListOpen &#125;]&quot;</span>&gt;</span><br><span class="line">      &lt;button @click=<span class="string">&quot;toggleList&quot;</span>&gt;</span><br><span class="line">        &#123;&#123; isListOpen ? <span class="string">&#x27;&lt;&lt;&#x27;</span> : <span class="string">&#x27;&gt;&gt;&#x27;</span> &#125;&#125;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;ul v-show=<span class="string">&quot;isListOpen&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;streamList&quot;</span>&gt;</span><br><span class="line">        &lt;li v-for=<span class="string">&quot;(stream, streamId) in streams&quot;</span> :key=<span class="string">&quot;streamId&quot;</span></span><br><span class="line">          @click=<span class="string">&quot;handleStreamClick(streamId)&quot;</span>&gt;</span><br><span class="line">          &#123;&#123; stream.name &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;video-grid&quot;</span>&gt;</span><br><span class="line">      &lt;div v-for=<span class="string">&quot;(video, index) in videoGrid&quot;</span> :key=<span class="string">&quot;index&quot;</span> class=<span class="string">&quot;video-cell&quot;</span> @click=<span class="string">&quot;replaceStream(index)&quot;</span>&gt;</span><br><span class="line">        &lt;video :<span class="built_in">id</span>=<span class="string">&quot;&#x27;videoElement&#x27; + index&quot;</span> controls&gt;&lt;/video&gt;</span><br><span class="line">        &lt;div v-if=<span class="string">&quot;video&quot;</span> class=<span class="string">&quot;overlay&quot;</span>&gt;&#123;&#123; streams[video.streamId].name &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Hls from <span class="string">&#x27;hls.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      streams: [], // 存储流数据</span><br><span class="line">      videoGrid: Array(4).fill(null), // 初始化4个视频画面为空</span><br><span class="line">      isPlaying: <span class="literal">false</span>, // 播放状态</span><br><span class="line">      hlsInstances: Array(4).fill(null), // HLS 对象的数组</span><br><span class="line">      isListOpen: <span class="literal">true</span>, // 控制列表的展开和收起</span><br><span class="line">      selectedGridIndex: null // 选中的网格索引</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">    this.fetchStreamList();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 获取流列表</span><br><span class="line">    <span class="function"><span class="title">fetchStreamList</span></span>() &#123;</span><br><span class="line">      const apiUrl = <span class="string">&#x27;http://1.1.1.1:1565/streams&#x27;</span>;</span><br><span class="line">      const username = <span class="string">&#x27;demo&#x27;</span>; // 默认用户名</span><br><span class="line">      const password = <span class="string">&#x27;demo&#x27;</span>; // 默认密码</span><br><span class="line">      const credentials = btoa(`<span class="variable">$&#123;username&#125;</span>:<span class="variable">$&#123;password&#125;</span>`);</span><br><span class="line"></span><br><span class="line">      fetch(apiUrl, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          <span class="string">&#x27;Authorization&#x27;</span>: `Basic <span class="variable">$&#123;credentials&#125;</span>`</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">        .<span class="keyword">then</span>(response =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (!response.ok) &#123;</span><br><span class="line">            throw new Error(`HTTP error! Status: <span class="variable">$&#123;response.status&#125;</span>`);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">return</span> response.json();</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="keyword">then</span>(data =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (data.status === 1 &amp;&amp; data.payload) &#123;</span><br><span class="line">            this.streams = data.payload; // 更新组件的数据</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            throw new Error(<span class="string">&#x27;Invalid data format&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(error =&gt; &#123;</span><br><span class="line">          console.error(<span class="string">&#x27;Failed to fetch stream list:&#x27;</span>, error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 处理点击流列表项</span><br><span class="line">    handleStreamClick(streamId) &#123;</span><br><span class="line">      const availableIndex = this.videoGrid.findIndex(video =&gt; video === null);</span><br><span class="line">      <span class="keyword">if</span> (availableIndex !== -1) &#123;</span><br><span class="line">        // 如果有空位，直接播放</span><br><span class="line">        this.addStreamToGrid(availableIndex, streamId);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // 如果没有空位，提示用户选择一个画面进行替换</span><br><span class="line">        this.selectedGridIndex = prompt(<span class="string">&#x27;All slots are full. Enter the index (0-3) to replace:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (this.selectedGridIndex !== null &amp;&amp; this.selectedGridIndex &gt;= 0 &amp;&amp; this.selectedGridIndex &lt; 4) &#123;</span><br><span class="line">          this.replaceStream(this.selectedGridIndex, streamId);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 将流添加到视频网格中</span><br><span class="line">    addStreamToGrid(gridIndex, streamId) &#123;</span><br><span class="line">      const channelId = Object.keys(this.streams[streamId].channels)[0];</span><br><span class="line">      this.videoGrid[gridIndex] = &#123; streamId, channelId &#125;;</span><br><span class="line">      this.<span class="variable">$nextTick</span>(() =&gt; &#123;</span><br><span class="line">        this.playStream(gridIndex, streamId, channelId);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 替换现有的视频流</span><br><span class="line">    replaceStream(gridIndex, streamId) &#123;</span><br><span class="line">      const channelId = Object.keys(this.streams[streamId].channels)[<span class="number">0</span>];</span><br><span class="line">      this.videoGrid[gridIndex] = &#123; streamId, channelId &#125;;</span><br><span class="line">      this.<span class="variable">$nextTick</span>(() =&gt; &#123;</span><br><span class="line">        this.playStream(gridIndex, streamId, channelId);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 播放视频流</span><br><span class="line">    playStream(gridIndex, streamId, channelId) &#123;</span><br><span class="line">      const hlsUrl = `http://<span class="number">1.1</span>.<span class="number">1.1</span>:<span class="number">1565</span>/stream/<span class="variable">$&#123;streamId&#125;</span>/channel/<span class="variable">$&#123;channelId&#125;</span>/hlsll/live/index.m3u8`;</span><br><span class="line"></span><br><span class="line">      // 清理之前的 HLS 实例</span><br><span class="line">      if (this.hlsInstances[gridIndex]) &#123;</span><br><span class="line">        this.hlsInstances[gridIndex].destroy();</span><br><span class="line">        this.hlsInstances[gridIndex] = null;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      const video = document.getElementById(&#x27;videoElement&#x27; + gridIndex);</span><br><span class="line"></span><br><span class="line">      if (Hls.isSupported()) &#123;</span><br><span class="line">        const hls = new Hls();</span><br><span class="line">        hls.loadSource(hlsUrl);</span><br><span class="line">        hls.attachMedia(video);</span><br><span class="line">        hls.on(Hls.Events.MANIFEST_PARSED, () =&gt; &#123;</span><br><span class="line">          video.play();</span><br><span class="line">          this.isPlaying = <span class="literal">true</span>; // 更新播放状态</span><br><span class="line">        &#125;);</span><br><span class="line">        this.hlsInstances[gridIndex] = hls; // 保存 HLS 实例</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (video.canPlayType(<span class="string">&#x27;application/vnd.apple.mpegurl&#x27;</span>)) &#123;</span><br><span class="line">        video.src = hlsUrl;</span><br><span class="line">        video.addEventListener(<span class="string">&#x27;loadedmetadata&#x27;</span>, () =&gt; &#123;</span><br><span class="line">          video.play();</span><br><span class="line">          this.isPlaying = <span class="literal">true</span>; // 更新播放状态</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        console.error(<span class="string">&#x27;HLS not supported and video cannot play&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 切换列表的显示状态</span><br><span class="line">    <span class="function"><span class="title">toggleList</span></span>() &#123;</span><br><span class="line">      this.isListOpen = !this.isListOpen;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">beforeUnmount</span></span>() &#123;</span><br><span class="line">    // 清理所有 HLS 实例</span><br><span class="line">    this.hlsInstances.forEach(hls =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (hls) &#123;</span><br><span class="line">        hls.destroy();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.video-player-container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sidebar &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  transition: width 0.3s ease;</span><br><span class="line">  background-color: <span class="comment">#f0f0f0;</span></span><br><span class="line">  padding: 10px;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sidebar-collapsed &#123;</span><br><span class="line">  width: 40px;</span><br><span class="line">  padding: 10px 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sidebar button &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#streamList &#123;</span></span><br><span class="line">  list-style: none;</span><br><span class="line">  padding: 0;</span><br><span class="line">  overflow-y: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#streamList li &#123;</span></span><br><span class="line">  cursor: pointer;</span><br><span class="line">  padding: 5px;</span><br><span class="line">  margin: 5px 0;</span><br><span class="line">  background-color: <span class="comment">#ddd;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#streamList li:hover &#123;</span></span><br><span class="line">  background-color: <span class="comment">#ccc;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.video-grid &#123;</span><br><span class="line">  flex-grow: 1;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: repeat(2, 1fr);</span><br><span class="line">  grid-template-rows: repeat(2, 1fr);</span><br><span class="line">  gap: 10px;</span><br><span class="line">  padding: 20px; /* 上下左右保留一定空白边距 */</span><br><span class="line">  box-sizing: border-box; /* 确保 padding 不影响网格大小 */</span><br><span class="line">  background-color: <span class="comment">#000;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.video-cell &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  border: 1px solid <span class="comment">#fff;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">video &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.overlay &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  background-color: rgba(0, 0, 0, 0.5);</span><br><span class="line">  color: <span class="comment">#fff;</span></span><br><span class="line">  text-align: center;</span><br><span class="line">  padding: 5px 0;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="效果最后演示"><a href="#效果最后演示" class="headerlink" title="效果最后演示"></a>效果最后演示</h3><p><img src="/2024/08/28/My-six-Post/1.png" alt="alt text"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HomeAssist进阶，自定义传感器实体，天气插件</title>
      <link href="/2024/07/29/My-Five-Post/"/>
      <url>/2024/07/29/My-Five-Post/</url>
      
        <content type="html"><![CDATA[<h2 id="了解自定义带来的玩法"><a href="#了解自定义带来的玩法" class="headerlink" title="了解自定义带来的玩法"></a>了解自定义带来的玩法</h2><p>随着设备的使用，稳定输出相关自动化场景与监测，可以自定义脚本用来执行需要的东西，目前自定义一个小的传感器实体进行天气的爬取与显示，如果需要更多玩法也可以慢慢的探索</p><h2 id="首先需要了解HA目录结构，方便后续布局部署"><a href="#首先需要了解HA目录结构，方便后续布局部署" class="headerlink" title="首先需要了解HA目录结构，方便后续布局部署"></a>首先需要了解HA目录结构，方便后续布局部署</h2><p>首先理解下HomeAssist的目录，与开发者的配置<br>1.文件夹下custom_components 该文件下用于存储自研的插件脚本与相关传感器实体软件<br>2.configuration.yaml 配置文件<br>3.blueprints 主题文件也放在根目录下即可</p><h2 id="天气插件放入位置"><a href="#天气插件放入位置" class="headerlink" title="天气插件放入位置"></a>天气插件放入位置</h2><p><img src="/2024/07/29/My-Five-Post/1.png" alt="alt text"></p><h2 id="项目文件内容"><a href="#项目文件内容" class="headerlink" title="项目文件内容"></a>项目文件内容</h2><p><img src="/2024/07/29/My-Five-Post/2.png" alt="alt text"></p><h2 id="代码文件"><a href="#代码文件" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="init-py"><a href="#init-py" class="headerlink" title="init.py"></a><strong>init</strong>.py</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DOMAIN = <span class="string">&quot;weather_integration&quot;</span></span><br><span class="line"></span><br><span class="line">async def async_setup(hass, config):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;Set up the weather integration.&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">return</span> True</span><br></pre></td></tr></table></figure><h3 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;domain&quot;</span>: <span class="string">&quot;weather_integration&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Weather Integration&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;requirements&quot;</span>: [<span class="string">&quot;requests&quot;</span>, <span class="string">&quot;lxml&quot;</span>],</span><br><span class="line">    <span class="string">&quot;codeowners&quot;</span>: [<span class="string">&quot;@your_github_username&quot;</span>],</span><br><span class="line">    <span class="string">&quot;iot_class&quot;</span>: <span class="string">&quot;cloud_polling&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="manifest-json-1"><a href="#manifest-json-1" class="headerlink" title="manifest.json"></a>manifest.json</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">from homeassistant.helpers.entity import Entity</span><br><span class="line">from .weather_script import get_weather</span><br><span class="line"></span><br><span class="line">_LOGGER = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">async def async_setup_platform(hass, config, async_add_entities, discovery_info=None):</span><br><span class="line">    async_add_entities([WeatherSensor(hass)])</span><br><span class="line"></span><br><span class="line">class WeatherSensor(Entity):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;Representation of a Weather Sensor.&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    def __init__(self, hass):</span><br><span class="line">        self._hass = hass</span><br><span class="line">        self._state = None</span><br><span class="line">        self._attr = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def name(self):</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&quot;Weather Sensor&quot;</span></span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def state(self):</span><br><span class="line">        <span class="built_in">return</span> self._state</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def extra_state_attributes(self):</span><br><span class="line">        <span class="built_in">return</span> self._attr</span><br><span class="line"></span><br><span class="line">    async def async_update(self):</span><br><span class="line">        try:</span><br><span class="line">            weather = await self._hass.async_add_executor_job(get_weather)</span><br><span class="line">            self._state = weather[<span class="string">&#x27;temperature&#x27;</span>]</span><br><span class="line">            self._attr = &#123;</span><br><span class="line">                <span class="string">&quot;location&quot;</span>: weather[<span class="string">&#x27;location&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;condition&quot;</span>: weather[<span class="string">&#x27;condition&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;temperature&quot;</span>: weather[<span class="string">&#x27;temperature&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;wind&quot;</span>: weather[<span class="string">&#x27;wind&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;windSpeed&quot;</span>: weather[<span class="string">&#x27;windSpeed&#x27;</span>],</span><br><span class="line">                <span class="string">&quot;tips&quot;</span>: weather[<span class="string">&#x27;tips&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        except Exception as e:</span><br><span class="line">            _LOGGER.error(<span class="string">&quot;Error updating weather sensor: %s&quot;</span>, e)</span><br><span class="line">            self._state = None</span><br><span class="line">            self._attr = &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="weather-script-py"><a href="#weather-script-py" class="headerlink" title="weather_script.py"></a>weather_script.py</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">def get_weather():</span><br><span class="line">    url = <span class="string">&#x27;https://tianqi.moji.com/&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;tianqi.moji.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 8.0.0; SM-G955U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Mobile Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;Hm_lvt_f943519a2c87edfe58584a4a20bc11bb=1650868412; Hm_lpvt_f943519a2c87edfe58584a4a20bc11bb=1650868484&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, headers=headers, verify=False, <span class="built_in">timeout</span>=30)</span><br><span class="line">    html_xml = etree.HTML(response.text)</span><br><span class="line"></span><br><span class="line">    weather_data = &#123;</span><br><span class="line">        <span class="string">&quot;location&quot;</span>: html_xml.xpath(<span class="string">&quot;/html/body/div[3]/div[2]/div[1]/div[1]/em/text()&quot;</span>)[0].strip(),</span><br><span class="line">        <span class="string">&quot;condition&quot;</span>: html_xml.xpath(<span class="string">&quot;//div[@class=&#x27;forecast clearfix&#x27;]/ul[@class=&#x27;days clearfix&#x27;][1]/li[2]/text()&quot;</span>)[1].strip(),</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: html_xml.xpath(<span class="string">&quot;//div[@class=&#x27;forecast clearfix&#x27;]/ul[@class=&#x27;days clearfix&#x27;][1]/li[3]/text()&quot;</span>)[0].strip(),</span><br><span class="line">        <span class="string">&quot;wind&quot;</span>: html_xml.xpath(<span class="string">&quot;//div[@class=&#x27;forecast clearfix&#x27;]/ul[@class=&#x27;days clearfix&#x27;][1]/li[4]/em/text()&quot;</span>)[0].strip(),</span><br><span class="line">        <span class="string">&quot;windSpeed&quot;</span>: html_xml.xpath(<span class="string">&quot;//div[@class=&#x27;forecast clearfix&#x27;]/ul[@class=&#x27;days clearfix&#x27;][1]/li[4]/b/text()&quot;</span>)[0].strip(),</span><br><span class="line">        <span class="string">&quot;tips&quot;</span>: html_xml.xpath(<span class="string">&quot;//div[@class=&#x27;wrap clearfix wea_info&#x27;]/div[@class=&#x27;left&#x27;]/div[@class=&#x27;wea_tips clearfix&#x27;]/em/text()&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> weather_data</span><br></pre></td></tr></table></figure><h3 id="配置文件-修改vim-configuration-yaml"><a href="#配置文件-修改vim-configuration-yaml" class="headerlink" title="配置文件 修改vim  configuration.yaml"></a>配置文件 修改vim  configuration.yaml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Loads default set of integrations. Do not remove.</span></span><br><span class="line">default_config:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load frontend themes from the themes folder</span></span><br><span class="line">frontend:</span><br><span class="line">  themes: !include_dir_merge_named themes</span><br><span class="line"></span><br><span class="line">automation: !include automations.yaml</span><br><span class="line">script: !include scripts.yaml</span><br><span class="line">scene: !include scenes.yaml</span><br><span class="line"></span><br><span class="line">sensor:</span><br><span class="line">  - platform: weather_integration</span><br><span class="line">    name: Weather Sensor</span><br><span class="line">    scan_interval: 300</span><br></pre></td></tr></table></figure><h2 id="Ha卡片配置"><a href="#Ha卡片配置" class="headerlink" title="Ha卡片配置"></a>Ha卡片配置</h2><p><img src="/2024/07/29/My-Five-Post/3.png" alt="alt text"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>: entities</span><br><span class="line">entities:</span><br><span class="line">  - entity: sensor.weather_sensor</span><br><span class="line">    name: Current Weather</span><br><span class="line">  - entity: sensor.weather_sensor</span><br><span class="line">    name: 位置</span><br><span class="line">    <span class="built_in">type</span>: attribute</span><br><span class="line">    attribute: location</span><br><span class="line">  - entity: sensor.weather_sensor</span><br><span class="line">    name: 天气</span><br><span class="line">    <span class="built_in">type</span>: attribute</span><br><span class="line">    attribute: condition</span><br><span class="line">  - entity: sensor.weather_sensor</span><br><span class="line">    name: 温度</span><br><span class="line">    <span class="built_in">type</span>: attribute</span><br><span class="line">    attribute: temperature</span><br><span class="line">  - entity: sensor.weather_sensor</span><br><span class="line">    name: 风向</span><br><span class="line">    <span class="built_in">type</span>: attribute</span><br><span class="line">    attribute: wind</span><br><span class="line">  - entity: sensor.weather_sensor</span><br><span class="line">    name: 风速</span><br><span class="line">    <span class="built_in">type</span>: attribute</span><br><span class="line">    attribute: windSpeed</span><br><span class="line">  - entity: sensor.weather_sensor</span><br><span class="line">    name: Tips</span><br><span class="line">    <span class="built_in">type</span>: attribute</span><br><span class="line">    attribute: tips</span><br><span class="line">state_color: <span class="literal">true</span></span><br><span class="line">title: 我的天气</span><br></pre></td></tr></table></figure><h3 id="文件部署后，检查配置及重载yaml生效"><a href="#文件部署后，检查配置及重载yaml生效" class="headerlink" title="文件部署后，检查配置及重载yaml生效"></a>文件部署后，检查配置及重载yaml生效</h3><p><img src="/2024/07/29/My-Five-Post/6.png" alt="alt text"></p><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p><img src="/2024/07/29/My-Five-Post/4.png" alt="alt text"><br><img src="/2024/07/29/My-Five-Post/5.png" alt="alt text"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新手小白如何了解 NAS 与 Docker，智能家居与 NET</title>
      <link href="/2024/07/13/My-Four-Post/"/>
      <url>/2024/07/13/My-Four-Post/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步：硬件选材与选用技术"><a href="#第一步：硬件选材与选用技术" class="headerlink" title="第一步：硬件选材与选用技术"></a>第一步：硬件选材与选用技术</h2><h3 id="1-钢铁侠定制主机"><a href="#1-钢铁侠定制主机" class="headerlink" title="1. 钢铁侠定制主机"></a>1. 钢铁侠定制主机</h3><p>我选择了宁美魔方 CR160 8+256G 钢铁侠定制版本的主机。主要原因有两个：</p><ul><li>我喜欢钢铁侠，定制版本的外观设计和性能配置都吸引了我。</li><li>定制版本与非定制版本价格相同且优惠，我毫不犹豫地选择了钢铁侠定制版本。</li></ul><h3 id="2-固态硬盘"><a href="#2-固态硬盘" class="headerlink" title="2. 固态硬盘"></a>2. 固态硬盘</h3><p>我选择了 2.2 NGFF 的梵想固态硬盘。固态硬盘的读写速度较快，能够提供良好的系统性能和响应速度。我通过京东购入时获得了优惠，2023 年价格也非常便宜。</p><h3 id="3-硬盘盒磁盘阵列"><a href="#3-硬盘盒磁盘阵列" class="headerlink" title="3. 硬盘盒磁盘阵列"></a>3. 硬盘盒磁盘阵列</h3><p>在购买硬盘盒时，我选择了带有磁盘阵列功能的硬盘盒，选用了 2*2T 的 RAID1（镜像模式），提供更高的数据冗余和安全性。一旦一块硬盘损坏，数据仍然可以恢复。硬盘盒的价格较高。</p><h3 id="4-外置无线网卡"><a href="#4-外置无线网卡" class="headerlink" title="4. 外置无线网卡"></a>4. 外置无线网卡</h3><p>如果主机支持有线连接和自带无线网卡，可以不买外置无线网卡。为了实现双网卡配置和更好地连接 NAS 及智能家居设备，我选择了绿联 8810C 外置无线网卡。该网卡需要降低 Ubuntu 内核才能安装驱动，我成功实现了双网卡配置。</p><hr><h2 id="新手小白如何了解-NAS-与-Docker"><a href="#新手小白如何了解-NAS-与-Docker" class="headerlink" title="新手小白如何了解 NAS 与 Docker"></a>新手小白如何了解 NAS 与 Docker</h2><p>双网卡配置为了 NAS、智能家居与 NET，Mac 笔记本电脑的 Docker  经过测试不是模式不支持是因为不应该映射网络 应该用host模式与主机保持同意网络环境 。</p><h3 id="一、网卡与-Ubuntu-内核的关系"><a href="#一、网卡与-Ubuntu-内核的关系" class="headerlink" title="一、网卡与 Ubuntu 内核的关系"></a>一、网卡与 Ubuntu 内核的关系</h3><p>网卡：绿联 8810C 需要的内核为 18.04，最高支持 5.3。安装后版本大于 5.3，果断选择最新的系统内核（如 Ubuntu 20.04.01，内核为 5.4）。</p><h3 id="二、网卡安装步骤"><a href="#二、网卡安装步骤" class="headerlink" title="二、网卡安装步骤"></a>二、网卡安装步骤</h3><ol><li><p>下载所需依赖工具包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install net-tools</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install build-essential</span><br></pre></td></tr></table></figure></li><li><p>网卡驱动下载：<br> github项目或者官方（由于官方没有提供通过github下载支持这款型号的网卡即可）<br> 安装方式：<br> 将驱动文件夹提取到桌面上,或者Python -m http.server 9999  启用一个服务  用wget下载下来，没有wget就换个方式下载<br> <img src="/2024/07/13/My-Four-Post/1.png" alt="alt text"><br> 打开终端输入：cd 桌面&#x2F;rtl8821CU&#x2F;  注：不同系统可能桌面位置不同，如果不确定可以百度搜索下<br> <img src="/2024/07/13/My-Four-Post/2.png" alt="alt text"><br> 进入文件夹后输入：sudo make 密码需要输入当前使用账户密码<br> <img src="/2024/07/13/My-Four-Post/3.png" alt="text"><br> 输入ls 查看8821cu.ko文件有没有生成<br> <img src="/2024/07/13/My-Four-Post/4.png" alt="alt text"><br> 输入sudo make install  提示已经将驱动放入内核<br> <img src="/2024/07/13/My-Four-Post/5.png" alt="alt text"><br> 可见结果：图形直接连（命令见下方命令）<br> <img src="/2024/07/13/My-Four-Post/6.png" alt="alt text"></p></li></ol><h4 id="命令连接wifi教程："><a href="#命令连接wifi教程：" class="headerlink" title="命令连接wifi教程："></a>命令连接wifi教程：</h4><ol><li><p>查看周围wifi信息<br> <img src="/2024/07/13/My-Four-Post/7.png" alt="alt text"><br> 确保您的两个无线网卡都可以正常工作并已正确安装在您的计算机上。</p><p> 打开终端或命令提示符，运行以下命令以查看当前的网络接口列表：<br> ifconfig -a<br> 这将列出您的计算机上所有的网络接口，包括无线网卡。<br> <img src="/2024/07/13/My-Four-Post/8.png" alt="alt text"><br> 确定要连接的无线网络的名称（SSID）和密码。确保您已正确配置了这些信息。</p><p> 运行以下命令来连接第一个无线网卡到目标网络：</p><p> sudo nmcli device wifi connect <SSID> password <password> ifname <interface><br> 将 <SSID> 替换为目标网络的名称，<password> 替换为网络的密码，<interface> 替换为第一个无线网卡的接口名称（例如 wlo2）。</interface></password></SSID></interface></password></SSID></p><p> 运行以下命令来连接第二个无线网卡到目标网络：</p><p> sudo nmcli device wifi connect <SSID> password <password> ifname <interface></interface></password></SSID></p><p> 将 <SSID> 替换为目标网络的名称，<password> 替换为网络的密码，<interface> 替换为第二个无线网卡的接口名称（例如 wlo3）。</interface></password></SSID></p><p> 等待一段时间，让系统完成连接并获取 IP 地址再通过ifocnifg查看<br> <img src="/2024/07/13/My-Four-Post/9.png" alt="alt text"></p></li></ol><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>在 Ubuntu 上安装 Docker 的步骤如下：</p><p>打开终端或命令行界面。</p><p>更新系统软件包列表，运行以下命令：</p><p>sudo apt update<br>安装 Docker 的依赖软件包，运行以下命令：<br>sudo apt install apt-transport-https ca-certificates curl software-properties-common</p><p><img src="/2024/07/13/My-Four-Post/10.png" alt="alt text"><br>添加 Docker 的官方 GPG 密钥，运行以下命令：<br>curl -fsSL <a href="https://download.docker.com/linux/ubuntu/gpg">https://download.docker.com/linux/ubuntu/gpg</a> | sudo gpg –dearmor -o &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg<br><img src="/2024/07/13/My-Four-Post/11.png" alt="alt text"><br>添加 Docker 的稳定版本软件源，运行以下命令：(截止2024-07-15 前如果这个如果能下就不用换)<br>echo “deb [arch&#x3D;amd64 signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpg] <a href="https://download.docker.com/linux/ubuntu">https://download.docker.com/linux/ubuntu</a> $(lsb_release -cs) stable” | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;docker.list &gt; &#x2F;dev&#x2F;null</p><p><img src="/2024/07/13/My-Four-Post/12.png" alt="alt text"></p><p>更新软件包列表，运行以下命令：<br>sudo apt update<br>安装 Docker 引擎，运行以下命令：<br>sudo apt install docker-ce docker-ce-cli containerd.io<br><img src="/2024/07/13/My-Four-Post/13.png" alt="alt text"><br>验证 Docker 是否成功安装，运行以下命令检查 Docker 版本：<br>docker –version<br><img src="/2024/07/13/My-Four-Post/14.png" alt="alt text"><br>如果成功安装，将显示 Docker 的版本信息。</p><p>Ifconfig：检测网卡docker的容器网卡</p><p><img src="/2024/07/13/My-Four-Post/15.png" alt="alt text"></p><h4 id="docker安装home-assistant：（智能家居容器）"><a href="#docker安装home-assistant：（智能家居容器）" class="headerlink" title="docker安装home-assistant：（智能家居容器）"></a>docker安装home-assistant：（智能家居容器）</h4><p>整理思路，首先在自己喜欢的个人目录上创建一个docker文件，这个文件是用来映射所有容器的config<br>例如我在home&#x2F;user 下创建的：my-container</p><p><img src="/2024/07/13/My-Four-Post/16.png" alt="alt text"><br>然后下载home-assistant，运行以下命令：（注意 不是sudo要用sudo 切到管理员）<br>sudo docker pull homeassistant&#x2F;home-assistant<br><img src="/2024/07/13/My-Four-Post/17.png" alt="alt text"></p><p>创建一个新的 Docker 容器来运行 Home Assistant。运行以下命令：</p><p>docker run -d –name homeassistant -p 8123:8123 -v &#x2F;path&#x2F;to&#x2F;config:&#x2F;config homeassistant&#x2F;home-assistant</p><p>我的命令：docker run -d –name homeassistant -p 8123:8123 -v &#x2F;home&#x2F;wangyaoqi&#x2F;my-container&#x2F;my-ha-config:&#x2F;config homeassistant&#x2F;home-assistant<br><img src="/2024/07/13/My-Four-Post/18.png" alt="alt text"></p><p>查看端口</p><p>ip 物理网卡查询进行访问都可以<br><img src="/2024/07/13/My-Four-Post/19.png" alt="alt text"></p><p>进入首页：<br><img src="/2024/07/13/My-Four-Post/20.png" alt="alt text"><br>配置网络：<br>一定先配置网络，有有线网卡的不用管<br>第一步：打开高级模式<br><img src="/2024/07/13/My-Four-Post/21.png" alt="alt text"><br>第二步 重启系统，稍后进入系统：<br><img src="/2024/07/13/My-Four-Post/22.png" alt="alt text"><br><img src="/2024/07/13/My-Four-Post/23.png" alt="alt text"><br>坑：再来： docker的定义关于容器网络的设定，必须重新安装容器才可以修改网络<br>删除docker重新安装，以后可以配置docker-conpose.yml 进行配置及挂载设定  目前这个项目软件无需挂载，默认即可<br>命令：<br>docker ps -a （查询容器ID）<br>停止容器<br>docker stop 容器ID<br>删除容器<br>docker em 容器ID<br><img src="/2024/07/13/My-Four-Post/24.png" alt="alt text"></p><p>重新安装：先了解下docker的网络模式：<br>Docker 提供了几种网络模式来连接和隔离容器。下面是几种常见的 Docker 网络模式：</p><p>桥接网络（Bridge Network）：这是 Docker 默认的网络模式。在桥接网络中，容器连接到一个虚拟网桥，该网桥与主机的物理网络接口连接。容器可以相互通信，并可以使用主机上的端口映射到容器内部的端口。</p><p>主机网络（Host Network）：在主机网络模式中，容器与主机共享网络命名空间，直接使用主机的网络接口。这意味着容器可以使用主机上的所有网络接口和端口，不需要进行端口映射。但是，容器之间的网络隔离性较差。</p><p>none 网络（None Network）：在 none 网络模式中，容器没有网络连接。这意味着容器无法通过网络访问外部系统，也无法被外部系统访问。none 网络模式适用于特定的安全要求或仅需要本地访问的容器。</p><p>自定义网络（Custom Network）：Docker 还允许创建自定义网络，以便在容器之间创建专用的网络环境。自定义网络提供了更高级的网络功能，例如容器名称解析和容器发现。可以使用 Docker CLI 或 Docker Compose 来创建和管理自定义网络。</p><p>使用 Docker 默认的桥接网络可以满足大多数容器的网络需求。如果需要更复杂的网络配置或容器之间的通信，可以考虑使用自定义网络。</p><h3 id="先查看下docker网络信息"><a href="#先查看下docker网络信息" class="headerlink" title="先查看下docker网络信息"></a>先查看下docker网络信息</h3><p>docker network ls<br><img src="/2024/07/13/My-Four-Post/25.png" alt="alt text"><br><img src="/2024/07/13/My-Four-Post/26.png" alt="alt text"><br>查看特定网络的详细信息：<br>docker network inspect <network-name></network-name></p><p>学习了下doker的网络，那么我们选择host网络与主机一样，使用 –network host 参数将容器连接到主机网络，从而绕过 Docker 的网络虚拟化，并直接使用主机网络接口。<br>命令如下：<br>docker run -d –name homeassistant –network host -v &#x2F;home&#x2F;wangyaoqi&#x2F;my-container&#x2F;my-ha-config:&#x2F;config homeassistant&#x2F;home-assistant<br><img src="/2024/07/13/My-Four-Post/27.png" alt="alt text"><br><img src="/2024/07/13/My-Four-Post/28.png" alt="alt text"></p><p>开始配置吧</p><p>安装hacs，首先要有这个集成包，需要下载，目前的容器目录见截图</p><p><img src="/2024/07/13/My-Four-Post/29.png" alt="alt text"><br>在我们安装容器的目录新建一个文件夹<br><img src="/2024/07/13/My-Four-Post/30.png" alt="alt text"><br><img src="/2024/07/13/My-Four-Post/31.png" alt="alt text"></p><p>刷新我们网站的后台；<a href="http://192.168.31.108:8123/config/dashboard">http://192.168.31.108:8123/config/dashboard</a>   端口号默认为8123<br><img src="/2024/07/13/My-Four-Post/32.png" alt="alt text"><br>安装hacs集成：通过这个集成去下载更多的智能插件<br><img src="/2024/07/13/My-Four-Post/33.png" alt="alt text"><br><img src="/2024/07/13/My-Four-Post/34.png" alt="alt text"><br>我的hacs过期了可以git找 不过也不需要这个东西</p><p>我有本地小米包扩展，直接安装</p><p><img src="/2024/07/13/My-Four-Post/35.png" alt="alt text"></p><p>接入小米账号，家里面如果有局域网 应该在开始的时候自动就会显示出网关<br>下一步，继续找到苹果的桥接程序添加集成，右侧通知扫码添加</p><p>暂时不开启外网访问，后续开启，用于在外面通过访问服务器进行控制家庭设备，但不是很友好，不方便，不能在家庭操作，准备购入homepad吧，对比了几款网关产品，pad不适合长时间使用，appletv家里没有电视不需要，选择homepad入手，目前二手价格在500左右，全新的700 （2023-03-15）</p><h2 id="域名解析服务，一键部署"><a href="#域名解析服务，一键部署" class="headerlink" title="域名解析服务，一键部署"></a>域名解析服务，一键部署</h2><p> DDNS解析华为云，找了很多，小米路由器无法自动解析，家里的网络不是大内网，什么是大内网，大内网就是外网ip无法ping通也就是无法解析了</p><h4 id="ddns-go-开始去github上找项目，ddns-go安装部署很快"><a href="#ddns-go-开始去github上找项目，ddns-go安装部署很快" class="headerlink" title="ddns-go 开始去github上找项目，ddns-go安装部署很快"></a>ddns-go 开始去github上找项目，ddns-go安装部署很快</h4><p>首先下载下来这个项目，我们开始有了思路<br>先创建一个自己喜欢的项目目录，比如my-ddns-server<br>开始创建<br><img src="/2024/07/13/My-Four-Post/36.png" alt="alt text"><br>创建好后去github下载下来，准备部署服务记住<br><img src="/2024/07/13/My-Four-Post/37.png" alt="alt text"><br>开始创建一个常驻脚本 不用nob 选择守护进程</p><p>首先安装下命令：<br>sudo apt-get install supervisor</p><p>&#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;这个目录为配置进程文件的目录，默认把ddns-go安装在这里<br>创建一个配置文件开始<br>sudo nano &#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;ddns-go.conf<br>配置文件内容：<br>[program:ddns-go]<br>command&#x3D;&#x2F;path&#x2F;to&#x2F;ddns-go          ; 替换为实际的 ddns-go 可执行文件路径<br>autostart&#x3D;true<br>autorestart&#x3D;true<br>stderr_logfile&#x3D;&#x2F;var&#x2F;log&#x2F;ddns-go.err.log<br>stdout_logfile&#x3D;&#x2F;var&#x2F;log&#x2F;ddns-go.out.log<br><img src="/2024/07/13/My-Four-Post/38.png" alt="alt text"><br>保存并退出编辑器。<br>更新 supervisor 配置：<br>Copy code<br>sudo supervisorctl reread<br>sudo supervisorctl update</p><p><img src="/2024/07/13/My-Four-Post/39.png" alt="alt text"><br>启动这个守护进程<br>sudo supervisorctl start ddns-go<br><img src="/2024/07/13/My-Four-Post/40.png" alt="alt text"><br>默认是启动的不允许再启动<br><img src="/2024/07/13/My-Four-Post/41.png" alt="alt text"><br>现在，ddns-go 将在后台以守护进程的方式运行。<br>查看守护进程的脚本：sudo supervisorctl status<br><img src="/2024/07/13/My-Four-Post/42.png" alt="alt text"><br>重新启动命令：sudo supervisorctl restart ddns-go<br>服务地址：端口为7896：<br><a href="http://192.168.31.108:9876/">http://192.168.31.108:9876/</a><br><img src="/2024/07/13/My-Four-Post/43.png" alt="alt text"></p><p>安装一个媒体库<br>Jellyfin   官方文档：8096</p><p>搜索docker资源<br>sudo docker search XXX<br> 复制资源到docker中<br>sudo docker cp &#x2F;path&#x2F;to&#x2F;source&#x2F;file_or_directory container_name:&#x2F;path&#x2F;to&#x2F;destination</p><p>安装一个nastool 端口为3000s</p><p>安装naslab 调研后清晰好用  后期主要使用 embl了<br>docker run -d –name nascab –network host -v &#x2F;home&#x2F;wangyaoqi&#x2F;my-container&#x2F;my-nascab-config:&#x2F;config -v &#x2F;DATE:&#x2F;media  ypptec&#x2F;nascab</p><h2 id="Lsblk-磁盘路径查"><a href="#Lsblk-磁盘路径查" class="headerlink" title="Lsblk 磁盘路径查"></a>Lsblk 磁盘路径查</h2><p>磁盘挂在将新安装的硬盘挂载到 &#x2F;datefile 目录，您可以按照以下步骤进行操作：</p><p>首先，创建一个用于挂载的目标文件夹，例如 &#x2F;datefile：</p><p>sudo mkdir &#x2F;datefile<br>然后，使用 mount 命令将 sdb2 分区挂载到 &#x2F;datefile 目录：</p><p>sudo mount &#x2F;dev&#x2F;sdb2 &#x2F;datefile<br>在这个命令中，&#x2F;dev&#x2F;sdb2 是新硬盘上的分区路径，&#x2F;datefile 是您想要将其挂载到的目标文件夹。</p><p>如果您希望每次系统启动时都自动挂载该硬盘分区，可以将其添加到 &#x2F;etc&#x2F;fstab 文件中。编辑 &#x2F;etc&#x2F;fstab 文件，并在文件末尾添加以下一行：</p><p>&#x2F;dev&#x2F;sdb2  &#x2F;datefile  ext4  defaults  0  2<br>这会告诉系统在启动时自动将 sdb2 分区挂载到 &#x2F;datefile 目录，并使用默认的 ext4 文件系统选项。请确保将文件系统类型（ext4）替换为您实际使用的文件系统类型。<br>保存并关闭 &#x2F;etc&#x2F;fstab 文件。<br>完成挂载后，您可以通过访问 &#x2F;datefile 目录来查看和使用新硬盘上的内容。<br>请注意，在执行挂载命令时，确保您具有足够的权限（使用 sudo）和正确的分区路径。确保已创建的目标文件夹存在，并且挂载点路径是正确的。</p><p>关于服务器监控温度，因服务器是迷你主机，发热严重，需观察，所需下载sensors软件包安装<br>sudo apt-get install lm-sensors</p><p>网络net解决方法：<br>光猫拨号无法net，想观察网络是不是光猫账号权限问题，通过telnet连入光猫ip，输入admin admin 访问终端，通过终端控制查看命令行：CUAdmin为命令  CUAdmin get 获取超级管理账号密码  </p><p>新问题：<br>管理员页面无法没有正常打开，无法查看权限，那么修改桥接</p><p>Df -h 查询磁盘目录<br> umount &#x2F;datefile <br>卸载挂在</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jira 容器化部署</title>
      <link href="/2024/07/13/My-Three-Post/"/>
      <url>/2024/07/13/My-Three-Post/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Jira-容器化部署一键"><a href="#使用-Jira-容器化部署一键" class="headerlink" title="使用 Jira 容器化部署一键"></a>使用 Jira 容器化部署一键</h1><h2 id="Jira"><a href="#Jira" class="headerlink" title="Jira"></a>Jira</h2><p>团队项目协作，出色的工作流与插件</p><h2 id="安装文档"><a href="#安装文档" class="headerlink" title="安装文档"></a>安装文档</h2><p><a href="https://github.com/haxqer/jira/blob/rm/README_zh.md">https://github.com/haxqer/jira/blob/rm/README_zh.md</a></p><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><p>jira<br>README | 中文文档</p><p>Long Term Support Version: v9.12.11<br>Latest Version: v9.17.0<br>新的使用方式 ，您可方便自行升级、修改各参数，支持https (感谢 xsharp).<br>Arm Version<br>新的Confluence&#x2F;Jira版本仅支持数据中心许可证</p><p>默认端口: 8080</p><p>环境要求<br>docker: 17.09.0+<br>docker-compose: 1.24.0+<br>使用 docker-compose 启动 jira<br>启动 jira &amp; mysql<br>    git clone <a href="https://github.com/haxqer/jira.git">https://github.com/haxqer/jira.git</a> <br>        &amp;&amp; cd jira <br>        &amp;&amp; git checkout rm <br>        &amp;&amp; docker-compose pull <br>        &amp;&amp; docker-compose up<br>以守护进程的方式启动 jira &amp; mysql<br>    docker-compose up -d<br>默认的 数据库(mysql8.0) 配置:<br>    driver&#x3D;mysql8.0<br>    host&#x3D;mysql-jira<br>    port&#x3D;3306<br>    db&#x3D;jira<br>    user&#x3D;root<br>    passwd&#x3D;123456<br>使用 docker 启动<br>启动 jira<br>    docker volume create jira_home_data &amp;&amp; docker network create jira-network &amp;&amp; docker run -p 8080:8080 -v jira_home_data:&#x2F;var&#x2F;jira –network jira-network –name jira-srv -e TZ&#x3D;’Asia&#x2F;Shanghai’ haxqer&#x2F;jira:9.17.0<br>然后配置你的数据库<br>破解 jira<br>docker exec jira-srv java -jar &#x2F;var&#x2F;agent&#x2F;atlassian-agent.jar <br>    -p jira <br>    -m <a href="mailto:&#72;&#x65;&#108;&#108;&#x6f;&#x40;&#119;&#x6f;&#x72;&#x6c;&#100;&#46;&#99;&#111;&#109;">&#72;&#x65;&#108;&#108;&#x6f;&#x40;&#119;&#x6f;&#x72;&#x6c;&#100;&#46;&#99;&#111;&#109;</a> <br>    -n <a href="mailto:&#x48;&#x65;&#108;&#108;&#111;&#x40;&#119;&#x6f;&#114;&#108;&#100;&#x2e;&#99;&#111;&#109;">&#x48;&#x65;&#108;&#108;&#111;&#x40;&#119;&#x6f;&#114;&#108;&#100;&#x2e;&#99;&#111;&#109;</a> <br>    -o your-org <br>    -s you-server-id-xxxx<br>初次安装 jira 时，安装页面会显示你的 server-id</p><p>破解 jira 的插件<br>例如: 你想要破解 BigGantt 插件<br>从 jira marketplace 中安装 BigGantt 插件<br>查看 BigGantt 的 App Key 是 : eu.softwareplant.biggantt<br>然后执行 :<br>docker exec jira-srv java -jar &#x2F;var&#x2F;agent&#x2F;atlassian-agent.jar <br>    -p eu.softwareplant.biggantt <br>    -m <a href="mailto:&#x48;&#x65;&#108;&#108;&#111;&#64;&#x77;&#x6f;&#x72;&#108;&#100;&#x2e;&#x63;&#x6f;&#x6d;">&#x48;&#x65;&#108;&#108;&#111;&#64;&#x77;&#x6f;&#x72;&#108;&#100;&#x2e;&#x63;&#x6f;&#x6d;</a> <br>    -n <a href="mailto:&#x48;&#101;&#108;&#x6c;&#x6f;&#64;&#119;&#111;&#114;&#x6c;&#x64;&#46;&#x63;&#111;&#x6d;">&#x48;&#101;&#108;&#x6c;&#x6f;&#64;&#119;&#111;&#114;&#x6c;&#x64;&#46;&#x63;&#111;&#x6d;</a> <br>    -o your-org <br>    -s you-server-id-xxxx<br>在 System -&gt; System Info 页面的 Server ID 字段即为你的 server-id</p><p>例如:</p><p>docker exec jira-srv java -jar &#x2F;var&#x2F;agent&#x2F;atlassian-agent.jar <br>    -p eu.softwareplant.biggantt <br>    -m <a href="mailto:&#x48;&#101;&#x6c;&#108;&#x6f;&#64;&#x77;&#x6f;&#x72;&#108;&#100;&#46;&#99;&#111;&#109;">&#x48;&#101;&#x6c;&#108;&#x6f;&#64;&#x77;&#x6f;&#x72;&#108;&#100;&#46;&#99;&#111;&#109;</a> <br>    -n <a href="mailto:&#x48;&#x65;&#108;&#108;&#x6f;&#x40;&#119;&#x6f;&#x72;&#108;&#100;&#x2e;&#x63;&#x6f;&#x6d;">&#x48;&#x65;&#108;&#108;&#x6f;&#x40;&#119;&#x6f;&#x72;&#108;&#100;&#x2e;&#x63;&#x6f;&#x6d;</a> <br>    -o <a href="https://jira.haxqer.cm/">https://jira.haxqer.cm</a> <br>    -s BSFN-Q264-VGCZ-0AOE<br>最后粘贴生成的 licence<br>Datacenter license<br>添加 -d 参数即可生成 datacenter license</p><p>docker exec jira-srv java -jar &#x2F;var&#x2F;agent&#x2F;atlassian-agent.jar <br>    -d <br>    -p jira <br>    -m <a href="mailto:&#72;&#101;&#x6c;&#108;&#x6f;&#64;&#x77;&#111;&#114;&#x6c;&#x64;&#x2e;&#x63;&#x6f;&#x6d;">&#72;&#101;&#x6c;&#108;&#x6f;&#64;&#x77;&#111;&#114;&#x6c;&#x64;&#x2e;&#x63;&#x6f;&#x6d;</a> <br>    -n <a href="mailto:&#x48;&#101;&#x6c;&#x6c;&#x6f;&#64;&#119;&#x6f;&#x72;&#x6c;&#100;&#46;&#x63;&#x6f;&#109;">&#x48;&#101;&#x6c;&#x6c;&#x6f;&#64;&#119;&#x6f;&#x72;&#x6c;&#100;&#46;&#x63;&#x6f;&#109;</a> <br>    -o your-org <br>    -s you-server-id-xxxx<br>如何升级<br>cd jira &amp;&amp; git pull<br>docker pull haxqer&#x2F;jira:rm &amp;&amp; docker-compose stop<br>docker-compose rm<br>输入 y 之后重启 jira:</p><p>docker-compose up -d<br>Arm<br>已经测试过的机器:</p><p>Mac mini(M1,2020)<br>感谢:</p><p>odidev 提供的 arm image.<br>    git clone <a href="https://github.com/haxqer/jira.git">https://github.com/haxqer/jira.git</a> <br>        &amp;&amp; cd jira <br>        &amp;&amp; git checkout rm &amp;&amp; cd lts_arm <br>        &amp;&amp; docker-compose pull <br>        &amp;&amp; docker-compose up<br>破解 Jira Service Management(jsm)<br>感谢:</p><p>d1m0nstr for Jira Service Management<br>docker exec jira-srv java -jar &#x2F;var&#x2F;agent&#x2F;atlassian-agent.jar <br>    -p jsm <br>    -m <a href="mailto:&#72;&#101;&#108;&#108;&#x6f;&#64;&#x77;&#x6f;&#114;&#x6c;&#100;&#x2e;&#x63;&#111;&#109;">&#72;&#101;&#108;&#108;&#x6f;&#64;&#x77;&#x6f;&#114;&#x6c;&#100;&#x2e;&#x63;&#111;&#109;</a> <br>    -n <a href="mailto:&#72;&#101;&#x6c;&#108;&#x6f;&#64;&#119;&#111;&#114;&#108;&#100;&#x2e;&#x63;&#111;&#109;">&#72;&#101;&#x6c;&#108;&#x6f;&#64;&#119;&#111;&#114;&#108;&#100;&#x2e;&#x63;&#111;&#109;</a> <br>    -o your-org&#x2F; <br>    -s you-server-id</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>omu简易的企业音频播放模拟校园铃声</title>
      <link href="/2024/07/11/My-seven-Post/"/>
      <url>/2024/07/11/My-seven-Post/</url>
      
        <content type="html"><![CDATA[<h2 id="干嘛的"><a href="#干嘛的" class="headerlink" title="干嘛的"></a>干嘛的</h2><p>音频播放定时  加载音频播放列表</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>musicproject<br>    - environment.yml<br>    - omu&#x2F;<br>    │<br>    ├── app.py<br>    ├── requirements.txt<br>    ├── Dockerfile<br>    ├── templates&#x2F;<br>    │   └── index.html<br>    └── audios&#x2F;<br>      - app.py  audios  logs  <strong>pycache</strong>  requirements.txt  static  tasks.json  templates  test.py<br>      - root@wangyaoqi:&#x2F;home&#x2F;wangyaoqi&#x2F;container&#x2F;orangemusic&#x2F;omu# ls<br>        app.py  audios  logs  <strong>pycache</strong>  requirements.txt  static  tasks.json  templates  test.py<br>        root@wangyaoqi:&#x2F;home&#x2F;wangyaoqi&#x2F;container&#x2F;orangemusic&#x2F;omu# cd audios&#x2F;<br>        root@wangyaoqi:&#x2F;home&#x2F;wangyaoqi&#x2F;container&#x2F;orangemusic&#x2F;omu&#x2F;audios# ls<br>        base.mp3  云烟成雨.mp3<br>        root@wangyaoqi:&#x2F;home&#x2F;wangyaoqi&#x2F;container&#x2F;orangemusic&#x2F;omu&#x2F;audios# cd ..&#x2F;logs&#x2F;<br>        root@wangyaoqi:&#x2F;home&#x2F;wangyaoqi&#x2F;container&#x2F;orangemusic&#x2F;omu&#x2F;logs# ls<br>        flask.log<br>        root@wangyaoqi:&#x2F;home&#x2F;wangyaoqi&#x2F;container&#x2F;orangemusic&#x2F;omu&#x2F;logs# cd ..&#x2F;static&#x2F;<br>        root@wangyaoqi:&#x2F;home&#x2F;wangyaoqi&#x2F;container&#x2F;orangemusic&#x2F;omu&#x2F;static# ls<br>        style.css<br>        root@wangyaoqi:&#x2F;home&#x2F;wangyaoqi&#x2F;container&#x2F;orangemusic&#x2F;omu&#x2F;static# cat ..&#x2F;tasks.json<br>        []root@wangyaoqi:&#x2F;home&#x2F;wangyaoqi&#x2F;container&#x2F;orangemusic&#x2F;omu&#x2F;static# cd ..&#x2F;templates<br>        root@wangyaoqi:&#x2F;home&#x2F;wangyaoqi&#x2F;container&#x2F;orangemusic&#x2F;omu&#x2F;templates# ls<br>        index.html<br>        root@wangyaoqi:&#x2F;home&#x2F;wangyaoqi&#x2F;container&#x2F;orangemusic&#x2F;omu&#x2F;templates# cat index.html </p><h3 id="environment-yml"><a href="#environment-yml" class="headerlink" title="environment.yml"></a>environment.yml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name: omu-app-env  <span class="comment"># 虚拟环境的名称，可以根据您的项目进行调整</span></span><br><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">dependencies:</span><br><span class="line">  - python=3.8  <span class="comment"># 指定 Python 的版本</span></span><br><span class="line">  - flask  <span class="comment"># Flask web 框架</span></span><br><span class="line">  - pygame  <span class="comment"># Pygame 音频处理库</span></span><br><span class="line">  - gunicorn  <span class="comment"># 生产环境的 WSGI HTTP 服务器</span></span><br><span class="line">  - schedule  <span class="comment"># 定时任务调度库</span></span><br></pre></td></tr></table></figure><h2 id="天气插件放入位置"><a href="#天气插件放入位置" class="headerlink" title="天气插件放入位置"></a>天气插件放入位置</h2><p><img src="/2024/07/11/My-seven-Post/1.png" alt="alt text"></p><h2 id="项目文件内容"><a href="#项目文件内容" class="headerlink" title="项目文件内容"></a>项目文件内容</h2><p><img src="/2024/07/11/My-seven-Post/2.png" alt="alt text"></p><h2 id="代码文件"><a href="#代码文件" class="headerlink" title="代码文件"></a>代码文件</h2><h3 id="app-py"><a href="#app-py" class="headerlink" title="app.py"></a>app.py</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from flask import Flask, request, jsonify, render_template, send_from_directory</span><br><span class="line">from threading import Thread</span><br><span class="line">import os</span><br><span class="line">import json</span><br><span class="line">import logging</span><br><span class="line">import schedule</span><br><span class="line">import time</span><br><span class="line">import pygame  <span class="comment"># 导入pygame库</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;audios&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;TASKS_FILE&#x27;</span>] = <span class="string">&#x27;tasks.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志记录</span></span><br><span class="line"><span class="keyword">if</span> not os.path.exists(<span class="string">&#x27;logs&#x27;</span>):</span><br><span class="line">    os.makedirs(<span class="string">&#x27;logs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.DEBUG,</span><br><span class="line">                    format=<span class="string">&#x27;%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]&#x27;</span>,</span><br><span class="line">                    handlers=[</span><br><span class="line">                        logging.FileHandler(<span class="string">&#x27;logs/flask.log&#x27;</span>),</span><br><span class="line">                        logging.StreamHandler()</span><br><span class="line">                    ])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化Pygame混音器</span></span><br><span class="line">pygame.mixer.init()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保上传文件的目录存在</span></span><br><span class="line"><span class="keyword">if</span> not os.path.exists(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>]):</span><br><span class="line">    os.makedirs(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保任务文件存在且包含有效的 JSON 数据</span></span><br><span class="line"><span class="keyword">if</span> not os.path.exists(app.config[<span class="string">&#x27;TASKS_FILE&#x27;</span>]):</span><br><span class="line">    with open(app.config[<span class="string">&#x27;TASKS_FILE&#x27;</span>], <span class="string">&#x27;w&#x27;</span>) as f:</span><br><span class="line">        json.dump([], f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载任务</span></span><br><span class="line">try:</span><br><span class="line">    with open(app.config[<span class="string">&#x27;TASKS_FILE&#x27;</span>], <span class="string">&#x27;r&#x27;</span>) as f:</span><br><span class="line">        tasks = json.load(f)</span><br><span class="line">except json.JSONDecodeError:</span><br><span class="line">    tasks = []</span><br><span class="line">    with open(app.config[<span class="string">&#x27;TASKS_FILE&#x27;</span>], <span class="string">&#x27;w&#x27;</span>) as f:</span><br><span class="line">        json.dump(tasks, f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def play_audio(filename):</span><br><span class="line">   <span class="comment"># print(&quot;laileme&quot;)</span></span><br><span class="line">    file_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">    try:</span><br><span class="line">        logging.debug(f<span class="string">&quot;Attempting to play audio file: &#123;file_path&#125;&quot;</span>)</span><br><span class="line">        sound = pygame.mixer.Sound(file_path)</span><br><span class="line">        sound.play()</span><br><span class="line">        <span class="keyword">while</span> pygame.mixer.Channel(0).get_busy():</span><br><span class="line">            pygame.time.Clock().tick(10)</span><br><span class="line">        logging.info(f<span class="string">&quot;Finished playing &#123;filename&#125;&quot;</span>)</span><br><span class="line">    except pygame.error as e:</span><br><span class="line">        logging.error(f<span class="string">&quot;Error playing audio: &#123;str(e)&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">def run_schedule():</span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">      <span class="comment">#  logging.debug(&quot;Running scheduled tasks...&quot;)</span></span><br><span class="line">        schedule.run_pending()</span><br><span class="line">       <span class="comment"># logging.debug(f&quot;Current scheduled jobs: &#123;schedule.get_jobs()&#125;&quot;)</span></span><br><span class="line">       <span class="comment"># logging.debug(&quot;Schedule check completed.&quot;)</span></span><br><span class="line">        time.sleep(1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def save_tasks():</span><br><span class="line">    with open(app.config[<span class="string">&#x27;TASKS_FILE&#x27;</span>], <span class="string">&#x27;w&#x27;</span>) as f:</span><br><span class="line">        json.dump(tasks, f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">def index():</span><br><span class="line">    audio_files = os.listdir(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br><span class="line">    <span class="built_in">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, audio_files=audio_files, tasks=tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>])</span><br><span class="line">def upload_file():</span><br><span class="line">    try:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;audio_file&#x27;</span> not <span class="keyword">in</span> request.files:</span><br><span class="line">            logging.error(<span class="string">&quot;No file part&quot;</span>)</span><br><span class="line">            <span class="built_in">return</span> jsonify(error=<span class="string">&quot;No file part&quot;</span>), 400</span><br><span class="line"></span><br><span class="line">        file = request.files[<span class="string">&#x27;audio_file&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            logging.error(<span class="string">&quot;No selected file&quot;</span>)</span><br><span class="line">            <span class="built_in">return</span> jsonify(error=<span class="string">&quot;No selected file&quot;</span>), 400</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> file:</span><br><span class="line">            filename = file.filename</span><br><span class="line">            file_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">            file.save(file_path)</span><br><span class="line">            logging.info(f<span class="string">&quot;Uploaded &#123;filename&#125;&quot;</span>)</span><br><span class="line">            <span class="built_in">return</span> jsonify(message=f<span class="string">&quot;File &#123;filename&#125; uploaded successfully&quot;</span>)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logging.error(f<span class="string">&quot;Error: &#123;str(e)&#125;&quot;</span>)</span><br><span class="line">        <span class="built_in">return</span> jsonify(error=str(e)), 500</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">&#x27;/schedule&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>])</span><br><span class="line">def schedule_task():</span><br><span class="line">    try:</span><br><span class="line">        data = request.json</span><br><span class="line">        filename = data[<span class="string">&#x27;filename&#x27;</span>]</span><br><span class="line">        play_time = data[<span class="string">&#x27;play_time&#x27;</span>]</span><br><span class="line">        days = data[<span class="string">&#x27;days&#x27;</span>]</span><br><span class="line">        logging.debug(f<span class="string">&quot;Scheduling task: &#123;filename&#125; at &#123;play_time&#125; on &#123;days&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> day <span class="keyword">in</span> days:</span><br><span class="line">            <span class="keyword">if</span> day == <span class="string">&quot;Monday&quot;</span>:</span><br><span class="line">                schedule.every().monday.at(play_time).<span class="keyword">do</span>(play_audio, filename)</span><br><span class="line">            <span class="keyword">elif</span> day == <span class="string">&quot;Tuesday&quot;</span>:</span><br><span class="line">                schedule.every().tuesday.at(play_time).<span class="keyword">do</span>(play_audio, filename)</span><br><span class="line">            <span class="keyword">elif</span> day == <span class="string">&quot;Wednesday&quot;</span>:</span><br><span class="line">                schedule.every().wednesday.at(play_time).<span class="keyword">do</span>(play_audio, filename)</span><br><span class="line">            <span class="keyword">elif</span> day == <span class="string">&quot;Thursday&quot;</span>:</span><br><span class="line">                schedule.every().thursday.at(play_time).<span class="keyword">do</span>(play_audio, filename)</span><br><span class="line">            <span class="keyword">elif</span> day == <span class="string">&quot;Friday&quot;</span>:</span><br><span class="line">                schedule.every().friday.at(play_time).<span class="keyword">do</span>(play_audio, filename)</span><br><span class="line">            <span class="keyword">elif</span> day == <span class="string">&quot;Saturday&quot;</span>:</span><br><span class="line">                schedule.every().saturday.at(play_time).<span class="keyword">do</span>(play_audio, filename)</span><br><span class="line">            <span class="keyword">elif</span> day == <span class="string">&quot;Sunday&quot;</span>:</span><br><span class="line">                schedule.every().sunday.at(play_time).<span class="keyword">do</span>(play_audio, filename)</span><br><span class="line"></span><br><span class="line">        tasks.append(&#123;<span class="string">&quot;filename&quot;</span>: filename, <span class="string">&quot;play_time&quot;</span>: play_time, <span class="string">&quot;days&quot;</span>: days&#125;)</span><br><span class="line">        save_tasks()</span><br><span class="line">        logging.info(f<span class="string">&quot;Scheduled &#123;filename&#125; to play at &#123;play_time&#125; on &#123;&#x27;, &#x27;.join(days)&#125;&quot;</span>)</span><br><span class="line">        logging.debug(f<span class="string">&quot;Current scheduled jobs: &#123;schedule.get_jobs()&#125;&quot;</span>)</span><br><span class="line">        <span class="built_in">return</span> jsonify(message=f<span class="string">&quot;Task scheduled successfully&quot;</span>)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logging.error(f<span class="string">&quot;Error: &#123;str(e)&#125;&quot;</span>)</span><br><span class="line">        <span class="built_in">return</span> jsonify(error=str(e)), 500</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">&#x27;/delete_task&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>])</span><br><span class="line">def delete_task():</span><br><span class="line">    try:</span><br><span class="line">        task_id = request.json[<span class="string">&#x27;task_id&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> 0 &lt;= task_id &lt; len(tasks):</span><br><span class="line">            tasks.pop(task_id)</span><br><span class="line">            save_tasks()</span><br><span class="line">            <span class="built_in">return</span> jsonify(message=<span class="string">&quot;Task deleted successfully&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">return</span> jsonify(error=<span class="string">&quot;Invalid task ID&quot;</span>), 400</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logging.error(f<span class="string">&quot;Error: &#123;str(e)&#125;&quot;</span>)</span><br><span class="line">        <span class="built_in">return</span> jsonify(error=str(e)), 500</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">&#x27;/audios/&lt;filename&gt;&#x27;</span>)</span><br><span class="line">def get_audio(filename):</span><br><span class="line">    <span class="built_in">return</span> send_from_directory(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 启动定时任务线程</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动 Flask 应用</span></span><br><span class="line">    schedule_thread = Thread(target=run_schedule, daemon=True)</span><br><span class="line">    schedule_thread.start()</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=5000, debug=False)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># play_audio(&quot;base.mp3&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;OMU: 音频播放管理系统&lt;/title&gt;</span><br><span class="line">    &lt;<span class="built_in">link</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">link</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/static/style.css&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;container mt-5&quot;</span>&gt;</span><br><span class="line">    &lt;h1 class=<span class="string">&quot;text-center mb-4&quot;</span>&gt;OMU: 音频播放管理系统&lt;/h1&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;card mb-4&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;card-header&quot;</span>&gt;</span><br><span class="line">            上传音频文件</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;card-body&quot;</span>&gt;</span><br><span class="line">            &lt;form <span class="built_in">id</span>=<span class="string">&quot;uploadForm&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;audio_file&quot;</span> accept=<span class="string">&quot;.mp3&quot;</span> required&gt;</span><br><span class="line">                &lt;button <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span>&gt;上传&lt;/button&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;col-half&quot;</span>&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;card mb-4&quot;</span>&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;card-header&quot;</span>&gt;</span><br><span class="line">                    设置任务</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;card-body&quot;</span>&gt;</span><br><span class="line">                    &lt;form <span class="built_in">id</span>=<span class="string">&quot;scheduleForm&quot;</span>&gt;</span><br><span class="line">                        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">                            &lt;label <span class="keyword">for</span>=<span class="string">&quot;filename&quot;</span>&gt;选择音频文件：&lt;/label&gt;</span><br><span class="line">                            &lt;<span class="keyword">select</span> name=<span class="string">&quot;filename&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;filename&quot;</span> class=<span class="string">&quot;form-control&quot;</span> required&gt;</span><br><span class="line">                                &#123;% <span class="keyword">for</span> audio <span class="keyword">in</span> audio_files %&#125;</span><br><span class="line">                                    &lt;option value=<span class="string">&quot;&#123;&#123; audio &#125;&#125;&quot;</span>&gt;&#123;&#123; audio &#125;&#125;&lt;/option&gt;</span><br><span class="line">                                &#123;% endfor %&#125;</span><br><span class="line">                            &lt;/select&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">                            &lt;label <span class="keyword">for</span>=<span class="string">&quot;play_time&quot;</span>&gt;播放时间：&lt;/label&gt;</span><br><span class="line">                            &lt;input <span class="built_in">type</span>=<span class="string">&quot;time&quot;</span> name=<span class="string">&quot;play_time&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;play_time&quot;</span> class=<span class="string">&quot;form-control&quot;</span> required&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">                            &lt;label <span class="keyword">for</span>=<span class="string">&quot;days&quot;</span>&gt;选择播放日期：&lt;/label&gt;</span><br><span class="line">                            &lt;<span class="keyword">select</span> name=<span class="string">&quot;days&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;days&quot;</span> class=<span class="string">&quot;form-control&quot;</span> multiple required&gt;</span><br><span class="line">                                &lt;option value=<span class="string">&quot;Monday&quot;</span>&gt;星期一&lt;/option&gt;</span><br><span class="line">                                &lt;option value=<span class="string">&quot;Tuesday&quot;</span>&gt;星期二&lt;/option&gt;</span><br><span class="line">                                &lt;option value=<span class="string">&quot;Wednesday&quot;</span>&gt;星期三&lt;/option&gt;</span><br><span class="line">                                &lt;option value=<span class="string">&quot;Thursday&quot;</span>&gt;星期四&lt;/option&gt;</span><br><span class="line">                                &lt;option value=<span class="string">&quot;Friday&quot;</span>&gt;星期五&lt;/option&gt;</span><br><span class="line">                                &lt;option value=<span class="string">&quot;Saturday&quot;</span>&gt;星期六&lt;/option&gt;</span><br><span class="line">                                &lt;option value=<span class="string">&quot;Sunday&quot;</span>&gt;星期日&lt;/option&gt;</span><br><span class="line">                            &lt;/select&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;button <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> class=<span class="string">&quot;btn btn-primary&quot;</span>&gt;设置任务&lt;/button&gt;</span><br><span class="line">                    &lt;/form&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;col-half&quot;</span>&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;card mb-4&quot;</span>&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;card-header&quot;</span>&gt;</span><br><span class="line">                    当前任务</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=<span class="string">&quot;card-body&quot;</span>&gt;</span><br><span class="line">                    &lt;ul <span class="built_in">id</span>=<span class="string">&quot;taskList&quot;</span> class=<span class="string">&quot;list-group&quot;</span>&gt;</span><br><span class="line">                        &#123;% <span class="keyword">for</span> task <span class="keyword">in</span> tasks %&#125;</span><br><span class="line">                            &lt;li class=<span class="string">&quot;list-group-item&quot;</span>&gt;</span><br><span class="line">                                &#123;&#123; task.filename &#125;&#125; - &#123;&#123; task.play_time &#125;&#125; - &#123;&#123; task.days | <span class="built_in">join</span>(<span class="string">&quot;, &quot;</span>) &#125;&#125;</span><br><span class="line">                                &lt;button class=<span class="string">&quot;btn btn-danger btn-sm&quot;</span> onclick=<span class="string">&quot;deleteTask(&#123;&#123; loop.index0 &#125;&#125;)&quot;</span>&gt;删除</span><br><span class="line">                                &lt;/button&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                        &#123;% endfor %&#125;</span><br><span class="line">                    &lt;/ul&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;card mb-4&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;card-header&quot;</span>&gt;</span><br><span class="line">            当前音频文件</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;card-body&quot;</span>&gt;</span><br><span class="line">            &lt;ul <span class="built_in">id</span>=<span class="string">&quot;audioList&quot;</span> class=<span class="string">&quot;list-group&quot;</span>&gt;</span><br><span class="line">                &#123;% <span class="keyword">for</span> audio <span class="keyword">in</span> audio_files %&#125;</span><br><span class="line">                    &lt;li class=<span class="string">&quot;list-group-item&quot;</span>&gt;</span><br><span class="line">                        &lt;a href=<span class="string">&quot;/audios/&#123;&#123; audio &#125;&#125;&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;&#123;&#123; audio &#125;&#125;&lt;/a&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(document).ready(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        $(<span class="string">&#x27;#uploadForm&#x27;</span>).on(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span> (e) &#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            var formData = new FormData(this);</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">&#x27;/upload&#x27;</span>,</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                data: formData,</span><br><span class="line">                processData: <span class="literal">false</span>,</span><br><span class="line">                contentType: <span class="literal">false</span>,</span><br><span class="line">                success: <span class="keyword">function</span> (response) &#123;</span><br><span class="line">                    alert(response.message);</span><br><span class="line">                    location.reload();</span><br><span class="line">                &#125;,</span><br><span class="line">                error: <span class="keyword">function</span> (xhr) &#123;</span><br><span class="line">                    alert(xhr.responseJSON.error);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&#x27;#scheduleForm&#x27;</span>).on(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span> (e) &#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            var data = &#123;</span><br><span class="line">                filename: $(<span class="string">&#x27;#filename&#x27;</span>).val(),</span><br><span class="line">                play_time: $(<span class="string">&#x27;#play_time&#x27;</span>).val(),</span><br><span class="line">                days: $(<span class="string">&#x27;#days&#x27;</span>).val()</span><br><span class="line">            &#125;;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">&#x27;/schedule&#x27;</span>,</span><br><span class="line">                <span class="built_in">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                contentType: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">                data: JSON.stringify(data),</span><br><span class="line">                success: <span class="keyword">function</span> (response) &#123;</span><br><span class="line">                    alert(response.message);</span><br><span class="line">                    location.reload();</span><br><span class="line">                &#125;,</span><br><span class="line">                error: <span class="keyword">function</span> (xhr) &#123;</span><br><span class="line">                    alert(xhr.responseJSON.error);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> deleteTask(taskId) &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">&#x27;/delete_task&#x27;</span>,</span><br><span class="line">            <span class="built_in">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            contentType: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">            data: JSON.stringify(&#123;task_id: taskId&#125;),</span><br><span class="line">            success: <span class="keyword">function</span> (response) &#123;</span><br><span class="line">                alert(response.message);</span><br><span class="line">                location.reload();</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="keyword">function</span> (xhr) &#123;</span><br><span class="line">                alert(xhr.responseJSON.error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Flask</span><br><span class="line">schedule</span><br></pre></td></tr></table></figure><h3 id="test-py"><a href="#test-py" class="headerlink" title="test.py"></a>test.py</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@wangyaoqi:/home/wangyaoqi/container/orangemusic/omu<span class="comment"># cat test.py </span></span><br><span class="line">import pygame  </span><br><span class="line">import sys  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化pygame的mixer模块  </span></span><br><span class="line">pygame.mixer.init()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载音频文件  </span></span><br><span class="line"><span class="comment"># 注意：你需要将&#x27;your_audio_file.mp3&#x27;替换为你的音频文件的实际路径  </span></span><br><span class="line">sound = pygame.mixer.Sound(<span class="string">&#x27;base.mp3&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 播放音频  </span></span><br><span class="line"><span class="comment"># 可选参数：loops=0 表示播放一次，loops=-1 表示无限循环播放  </span></span><br><span class="line">sound.play()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待音频播放完成  </span></span><br><span class="line"><span class="comment"># 注意：pygame.mixer.Channel.get_busy() 方法用于检查当前通道是否正在播放  </span></span><br><span class="line"><span class="keyword">while</span> pygame.mixer.Channel(0).get_busy():  </span><br><span class="line">    pygame.time.Clock().tick(10)  <span class="comment"># 简单的延迟来避免阻塞  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出pygame  </span></span><br><span class="line">pygame.quit()  </span><br><span class="line">sys.exit()</span><br></pre></td></tr></table></figure><h2 id="如何构建"><a href="#如何构建" class="headerlink" title="如何构建"></a>如何构建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">    root@wangyaoqi:/home/wangyaoqi/container/nodockerconda<span class="comment"># supervisorctl status</span></span><br><span class="line">    omu                              RUNNING   pid 20454, <span class="built_in">uptime</span> 47 days, 20:31:13</span><br><span class="line">    </span><br><span class="line">    root@wangyaoqi:/etc/supervisor<span class="comment"># ls</span></span><br><span class="line">conf.d  supervisord.conf</span><br><span class="line">root@wangyaoqi:/etc/supervisor<span class="comment"># cat supervisord.conf </span></span><br><span class="line">; supervisor config file</span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file=/var/run/supervisor.sock   ; (the path to the socket file)</span><br><span class="line"><span class="built_in">chmod</span>=0700                       ; sockef file mode (default 0700)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/var/log/supervisor/supervisord.log ; (main <span class="built_in">log</span> file;default <span class="variable">$CWD</span>/supervisord.log)</span><br><span class="line">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">childlogdir=/var/log/supervisor            ; (<span class="string">&#x27;AUTO&#x27;</span> child <span class="built_in">log</span> <span class="built_in">dir</span>, default <span class="variable">$TEMP</span>)</span><br><span class="line"></span><br><span class="line">; the below section must remain <span class="keyword">in</span> the config file <span class="keyword">for</span> RPC</span><br><span class="line">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them <span class="keyword">in</span> separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  <span class="keyword">for</span> a unix socket</span><br><span class="line"></span><br><span class="line">; The [include] section can just contain the <span class="string">&quot;files&quot;</span> setting.  This</span><br><span class="line">; setting can list multiple files (separated by whitespace or</span><br><span class="line">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class="line">; interpreted as relative to this file.  Included files *cannot*</span><br><span class="line">; include files themselves.</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf</span><br><span class="line">root@wangyaoqi:/etc/supervisor<span class="comment"># cd /etc/supervisor/conf.d/</span></span><br><span class="line">root@wangyaoqi:/etc/supervisor/conf.d<span class="comment"># ls</span></span><br><span class="line">omu.conf</span><br><span class="line">root@wangyaoqi:/etc/supervisor/conf.d<span class="comment"># cat omu.conf </span></span><br><span class="line">[program:omu]</span><br><span class="line"><span class="built_in">command</span>=/home/wangyaoqi/miniconda3/envs/omu/bin/python /home/wangyaoqi/container/orangemusic/omu/app.py</span><br><span class="line">directory=/home/wangyaoqi/container/orangemusic/omu</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stderr_logfile=/var/log/omu.err.log</span><br><span class="line">stdout_logfile=/var/log/omu.out.log</span><br><span class="line">user=wangyaoqi</span><br><span class="line">environment=HOME=<span class="string">&quot;/home/wangyaoqi&quot;</span>,USER=<span class="string">&quot;wangyaoqi&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 部署笔记</title>
      <link href="/2024/06/29/My-Two-Post/"/>
      <url>/2024/06/29/My-Two-Post/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-部署笔记"><a href="#Docker-部署笔记" class="headerlink" title="Docker 部署笔记"></a>Docker 部署笔记</h1><h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><p>Docker 是一种广泛使用的容器化平台，可以在开发、测试和生产环境中轻松部署和管理应用程序。以下是从 Windows 和 Linux 系统上安装 Docker 的步骤及其原理的详细梳理。</p><h2 id="老话，说说我为什么要掌握Docker"><a href="#老话，说说我为什么要掌握Docker" class="headerlink" title="老话，说说我为什么要掌握Docker?"></a>老话，说说我为什么要掌握Docker?</h2><p>Docker 已成为现代 IT 和开发环境中不可或缺的工具。对于我的职业发展和个人兴趣来说，掌握 Docker 具有显著的优势，尤其是在涉及技术环境部署、物联网、智能化设备以及 NAS 系统时。以下是我认为更详细的原因：</p><h3 id="1-职业发展需求：技术环境的部署和管理"><a href="#1-职业发展需求：技术环境的部署和管理" class="headerlink" title="1. 职业发展需求：技术环境的部署和管理"></a>1. 职业发展需求：技术环境的部署和管理</h3><pre><code>1.1. 高效的环境部署一致性：Docker 容器确保在开发、测试和生产环境中运行的应用程序具有一致性，无论底层环境如何变化。隔离性：每个容器独立运行，避免不同应用之间的冲突和依赖问题。快速启动：容器的轻量级特性使得启动速度非常快，便于快速部署和迭代。1.2. 易于扩展和管理弹性扩展：Docker 容器可以轻松地横向扩展，满足应用程序的负载需求。便捷的更新：通过镜像管理和版本控制，可以快速更新和回滚应用程序，简化维护工作。1.3. 强大的生态系统丰富的工具和服务：Docker 提供了从开发到部署的一整套工具，支持与 CI/CD 流水线、编排系统（如 Kubernetes）的无缝集成。社区支持：大量的开源项目和社区支持，使得 Docker 生态系统不断发展和完善。</code></pre><h3 id="2-个人兴趣与物联网、智能化设备"><a href="#2-个人兴趣与物联网、智能化设备" class="headerlink" title="2. 个人兴趣与物联网、智能化设备"></a>2. 个人兴趣与物联网、智能化设备</h3><pre><code>2.1. 快速试验和开发轻量化：Docker 容器可以在资源有限的设备上高效运行，适用于物联网和智能化设备的开发与部署。灵活性：无需修改底层操作系统，就可以在 Docker 容器中运行不同的服务和应用，方便测试和实验。2.2. 多样化的应用场景跨平台兼容性：Docker 支持在不同硬件架构上运行，适用于各种物联网设备和嵌入式系统。模块化：通过容器化，能将不同的功能模块化，便于管理和更新，提升开发效率。</code></pre><h3 id="3-NAS-系统中的最佳选择"><a href="#3-NAS-系统中的最佳选择" class="headerlink" title="3. NAS 系统中的最佳选择"></a>3. NAS 系统中的最佳选择</h3><pre><code>3.1. 轻松部署与管理简化复杂性：NAS（网络附加存储）设备通常用于家庭或小型办公室环境，Docker 可以简化这些设备上的应用部署过程。快速安装：通过 Docker，可以快速安装和配置各种常用的应用和服务，如文件共享、媒体服务器、数据库等。3.2. 高效资源利用低资源占用：相比传统的虚拟机，Docker 容器更加轻量，能更好地利用 NAS 设备的资源。并发运行：在同一个 NAS 上，可以同时运行多个 Docker 容器，满足多种应用需求。3.3. 灵活的扩展和升级动态调整：根据需要，随时可以增加或删除容器，灵活调整系统功能和容量。无缝升级：通过更新容器镜像，可以轻松完成系统和应用的升级，而无需重启整个 NAS 系统。</code></pre><h2 id="Docker-原理"><a href="#Docker-原理" class="headerlink" title="Docker 原理"></a>Docker 原理</h2><p>Docker 利用操作系统级别的虚拟化技术来提供软件容器，使得应用程序可以在隔离的环境中运行。我曾经探讨及查看，在宿主机中docker每一个启动容器都是一个现成一个信号，所以首先我们要了解主要的核心组件和概念包括：</p><h3 id="1-Docker-镜像（Image）"><a href="#1-Docker-镜像（Image）" class="headerlink" title="1. Docker 镜像（Image）"></a>1. Docker 镜像（Image）</h3><p>定义：只读的模板，包含运行应用程序所需的一切，包括代码、库、环境变量等。[目前如果不科学上网，就多看看B站吧，从2024-06-07号开始，链路国外镜像源逐渐的不能用了<br>，后续再记录怎样替换镜像源，一言难尽]作用：用于创建 Docker 容器。</p><h3 id="2-Docker-容器（Container）"><a href="#2-Docker-容器（Container）" class="headerlink" title="2. Docker 容器（Container）"></a>2. Docker 容器（Container）</h3><p>定义：由镜像实例化而来的一个运行环境，是一个轻量级、独立的可执行包。<br>作用：确保应用程序及其依赖可以在任何环境下稳定运行。</p><h3 id="3-Docker-引擎（Docker-Engine）-Docker的软件及命令应用，在宿主机中会显示"><a href="#3-Docker-引擎（Docker-Engine）-Docker的软件及命令应用，在宿主机中会显示" class="headerlink" title="3. Docker 引擎（Docker Engine） [Docker的软件及命令应用，在宿主机中会显示]"></a>3. Docker 引擎（Docker Engine） [Docker的软件及命令应用，在宿主机中会显示]</h3><p>定义：Docker 的核心组件，包含 Docker 守护进程（Docker Daemon）、REST API 接口和命令行工具（CLI）。<br>作用：负责管理 Docker 容器和镜像。</p><h3 id="4-Docker-文件（Dockerfile）-Docker既然是个容器，我可以通过这个方式构建脚本化生成我需要的容器运行逻辑"><a href="#4-Docker-文件（Dockerfile）-Docker既然是个容器，我可以通过这个方式构建脚本化生成我需要的容器运行逻辑" class="headerlink" title="4. Docker 文件（Dockerfile）[Docker既然是个容器，我可以通过这个方式构建脚本化生成我需要的容器运行逻辑]"></a>4. Docker 文件（Dockerfile）[Docker既然是个容器，我可以通过这个方式构建脚本化生成我需要的容器运行逻辑]</h3><p>定义：一个文本文件，包含一系列指令，用于定义如何构建 Docker 镜像。<br>作用：通过自动化的方式生成定制化的镜像。</p><h3 id="5-Docker-Compose-配置文件一样的存在"><a href="#5-Docker-Compose-配置文件一样的存在" class="headerlink" title="5. Docker Compose  [配置文件一样的存在]"></a>5. Docker Compose  [配置文件一样的存在]</h3><p>定义：用于定义和运行多容器 Docker 应用的工具。<br>作用：通过一个 YAML 文件来配置应用程序的服务、网络和卷。<br>二、Windows 系统上安装 Docker</p><ol><li>安装前的准备<br>系统要求：Windows 10 64-bit: Pro, Enterprise, or Education 版本，1903 或更高版本；或 Windows Server 2019。<br>硬件要求：启用硬件虚拟化（Intel VT-x 或 AMD-V）。</li><li>安装步骤<br>2.1. 下载 Docker Desktop<br>访问<a href="https://www.docker.com/"> Docker 官网</a>下载安装包，mac操作系统直接下载dmg安装包。<br>下载适用于 Windows 的 Docker Desktop 安装程序。<br>2.2. 安装 Docker Desktop<br>双击安装包并按照提示完成安装。<br>在安装过程中，可以选择安装 WSL 2（适用于更高效的 Linux 容器运行）。<br>2.3. 配置 Docker Desktop<br>安装完成后，启动 Docker Desktop。<br>初次启动时，选择使用 WSL 2 还是 Hyper-V 作为后台支持。<br>完成基本配置，确保 Docker Desktop 已正常运行（图标应显示在系统托盘中）。<br>2.4. 验证安装<br>打开命令提示符或 PowerShell，运行以下命令验证 Docker 安装：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version  <span class="comment">#显示 Docker 版本信息。</span></span><br></pre></td></tr></table></figure>运行测试容器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world  <span class="comment">#如果看到 &quot;Hello from Docker!&quot; 的输出，则说明 Docker 已成功安装和配置。</span></span><br></pre></td></tr></table></figure>三、Linux 系统上安装 Docker</li><li>安装前的准备<br>系统要求：现代的 Linux 发行版，通常建议使用最新的版本。<br>权限要求：需要具有 sudo 或 root 权限来安装和管理 Docker。</li><li>安装步骤<br>2.1. 更新包管理器[Ubuntu apt管理器  ]<br>使用以下命令更新系统的包管理器（以 Ubuntu 为例）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  <span class="comment">#如果看到 &quot;Hello from Docker!&quot; 的输出，则说明 Docker 已成功安装和配置。</span></span><br></pre></td></tr></table></figure>2.2. 安装必要的依赖<br>安装依赖包，确保系统支持 HTTPS：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>2.3. 添加 Docker GPG 密钥<br>使用以下命令添加 Docker 官方的 GPG 密钥：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>2.4. 添加 Docker 仓库<br>添加 Docker 的 APT 仓库：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure>2.5. 安装 Docker CE<br>更新包管理器，并安装 Docker CE（Community Edition）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>2.6. 启动并验证 Docker<br>启动 Docker 服务：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>验证 Docker 安装：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker --version  <span class="comment">#显示 Docker 版本信息。</span></span><br></pre></td></tr></table></figure>运行测试容器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world  <span class="comment">#如果看到 &quot;Hello from Docker!&quot; 的输出，则说明 Docker 已成功安装和配置。</span></span><br></pre></td></tr></table></figure>2.7. （可选,但我一般都配置下方便，如果主机为业务机就不配置了）配置非 root 用户运行 Docker<br>创建 Docker 用户组，并将当前用户添加到组中：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>退出并重新登录，以应用组更改。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> docker 部署 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/27/hello-world/"/>
      <url>/2024/06/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo 项目并在 GitHub 上部署指南</title>
      <link href="/2022/03/02/My-First-Post/"/>
      <url>/2022/03/02/My-First-Post/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Hexo-项目并在-GitHub-上部署指南"><a href="#使用-Hexo-项目并在-GitHub-上部署指南" class="headerlink" title="使用 Hexo 项目并在 GitHub 上部署指南"></a>使用 Hexo 项目并在 GitHub 上部署指南</h1><h2 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h2><p>Hexo 是一个快速、简洁且高效的博客框架，基于 Node.js 开发，适用于个人和团队博客的搭建。</p><h2 id="我为什么选择Hexo-作为博客框架的搭建"><a href="#我为什么选择Hexo-作为博客框架的搭建" class="headerlink" title="我为什么选择Hexo,作为博客框架的搭建"></a>我为什么选择Hexo,作为博客框架的搭建</h2><p>原因：近期在使用air2软件的服务中，相关bt离线服务无法正常下载，在google搜索后发现了一个对该问题分析原因的网站[网站地址]（<a href="https://p3terx.com/">https://p3terx.com/</a> “p3terx”），点了点，加载响应超级快，体验感觉非常好，我就希望我的博客主站就用这个来做吧，那么是怎么做呢，先通过openai的chatgpt 进行交互，了解到网站是由Hexo 及butterfly主题来生成的。那么我决定来搭建一个属于个人的博客网站。</p><h2 id="步骤一：安装-Hexo"><a href="#步骤一：安装-Hexo" class="headerlink" title="步骤一：安装 Hexo"></a>步骤一：安装 Hexo</h2><ol><li><p><strong>前置：本地服务一定有 Node.js 和 npm</strong></p><ul><li>访问 <a href="https://nodejs.org/">Node.js 官网</a> 下载并安装最新版本的 Node.js。</li><li>npm 会随 Node.js 一同安装。</li></ul></li><li><p><strong>安装 Hexo</strong></p><ul><li>npm install -g hexo-cli</li><li>hexo init myblog</li></ul></li><li><p><strong>hexo的一些指令及文件格式介绍</strong></p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init <span class="comment">#命令用于初始化一个本地文件夹为网站的根目录</span></span><br><span class="line">$ hexo new title <span class="comment">#新建一篇文章</span></span><br><span class="line">$ hexo generate <span class="comment">#可以简写成 hexo g该命令用于生成静态文件</span></span><br><span class="line">$ hexo server <span class="comment">#命令用于启动本地服务器，一般可以简写成 hexo s</span></span><br><span class="line">   <span class="comment">#可以加一些参数</span></span><br><span class="line">      -p    <span class="comment">#选项 ，指定服务器端口，默认为 4000</span></span><br><span class="line">      -i    <span class="comment">#选项，指定服务器 IP 地址，默认为 0.0.0.0</span></span><br><span class="line">      -s    <span class="comment">#选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</span></span><br><span class="line">$ hexo deploy <span class="comment">#命令用于部署网站，一般可以简写成 hexo d (这个基本就是推送部署到指定位置)</span></span><br><span class="line">$ hexo clean <span class="comment">#命令用于清理缓存文件，是一个比较常用的命令</span></span><br><span class="line">$ hexo --safe <span class="comment">#表示安全模式，用于禁用加载插件和脚本</span></span><br><span class="line">$ hexo --debug <span class="comment">#表示调试模式，用于将消息详细记录到终端和 debug.log 文件</span></span><br><span class="line">$ hexo --silent  <span class="comment">#表示静默模式，用于静默输出到终端</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="步骤二：配置主题与文件目录"><a href="#步骤二：配置主题与文件目录" class="headerlink" title="步骤二：配置主题与文件目录"></a>步骤二：配置主题与文件目录</h2><ol><li><strong>Butterfly主题下载</strong><br>-项目根目录下安装 Butterfly 主题   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-theme-butterfly</span><br></pre></td></tr></table></figure>-配置文件<blockquote><p>hexo配置文件<br>   -项目根目录：_config.yml<br>   -找到 theme 配置项，将其值改为 butterfly：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></p></blockquote></li><li><strong>Butterfly 主题配置</strong><br>-Butterfly 主题有自己的配置文件 _config.butterfly.yml，通常在 themes&#x2F;butterfly&#x2F; 目录下。<blockquote><p>_config.butterfly.yml<br>   -网站基本信息：如标题、描述、语言等。<br>   -菜单和导航栏：定义导航栏中的菜单项。<br>   -外观：如主题颜色、字体、背景图等。<br>   -插件和小工具：如搜索功能、标签云、分类、最近文章等。</p></blockquote></li></ol><h3 id="撰写文章"><a href="#撰写文章" class="headerlink" title="撰写文章"></a>撰写文章</h3><ol><li><strong>Hexo 使用 Markdown 格式来撰写文章。</strong><ul><li>手动创建：在 source&#x2F;_posts&#x2F; 目录下，1.可以创建一个新的 Markdown 文件：**.md</li><li>自动创建： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new todaynode <span class="comment">#新建一篇文章</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="步骤三：hexo部署：配置-Git"><a href="#步骤三：hexo部署：配置-Git" class="headerlink" title="步骤三：hexo部署：配置 Git"></a>步骤三：hexo部署：配置 Git</h2><ol><li><p><strong>在 GitHub 上创建仓库主站。</strong></p><ul><li>登录 GitHub，创建一个新的空仓库，例如 username.github.io（其中 username 是你的 GitHub 用户名）。</li></ul></li><li><p><strong>hexo 部署</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  <span class="comment">#该命令用于生成静态文件  public </span></span><br></pre></td></tr></table></figure><ul><li>在 Hexo 项目根目录下，安装 hexo-deployer-git 插件</li><li>配置 _config.yml 文件，添加部署设置： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ deploy:</span><br><span class="line">   <span class="built_in">type</span>: git</span><br><span class="line">   repo: https://github.com/your-username/your-repo.git</span><br><span class="line">   branch: main</span><br></pre></td></tr></table></figure></li><li>配置 Git<blockquote><p>使用 SSH 密钥认证：<br>   生成 SSH 密钥：如果你还没有 SSH 密钥，可以使用以下命令生成：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制代码</span></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"><span class="comment">#按照提示一路回车，生成密钥对。</span></span><br><span class="line"><span class="comment">#添加 SSH 密钥到 GitHub：</span></span><br><span class="line"><span class="comment">#复制你的 SSH 公钥：</span></span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub  <span class="comment">#(ssh 目录)</span></span><br><span class="line"><span class="comment">#将公钥添加到 GitHub 的 SSH 设置中。</span></span><br><span class="line"><span class="comment">#登录 GitHub，转到 Settings -&gt; SSH and GPG keys -&gt; New SSH key，将复制的公钥粘贴到 Key 文本框中，然后点击 Add SSH key。</span></span><br></pre></td></tr></table></figure></p></blockquote></li><li>推送 hexo d <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d  <span class="comment">#会自动推送public目录下的文件到git </span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="其它GIT相关"><a href="#其它GIT相关" class="headerlink" title="其它GIT相关"></a>其它GIT相关</h3><ul><li>使用git 托管工具推送部署到 GitHub Pages</li><li>Git 基本操作<blockquote><pre><code> git info   初始化 git remote add origin git@github.com:wangyaoqi/wangyaoqi.github.io.git        设置远程仓库 git remote -v  确认 origin 远程仓库 git add .  #提交更改到本地仓库 git commit -m &quot;提交说明&quot;    git push origin main      #推送本地更改到远程仓库 git checkout main   #切换分支 git pull origin main  #拉取分支变更 git merge my-new-branch  #合并分支 git merge my-new-branch --allow-unrelated-histories  #强制合并  前提已在主分支下</code></pre></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

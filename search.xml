<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>My-Three-Post</title>
      <link href="/2024/07/13/My-Three-Post/"/>
      <url>/2024/07/13/My-Three-Post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 部署笔记</title>
      <link href="/2024/06/29/My-Two-Post/"/>
      <url>/2024/06/29/My-Two-Post/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-部署笔记"><a href="#Docker-部署笔记" class="headerlink" title="Docker 部署笔记"></a>Docker 部署笔记</h1><h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><p>Docker 是一种广泛使用的容器化平台，可以在开发、测试和生产环境中轻松部署和管理应用程序。以下是从 Windows 和 Linux 系统上安装 Docker 的步骤及其原理的详细梳理。</p><h2 id="老话，说说我为什么要掌握Docker"><a href="#老话，说说我为什么要掌握Docker" class="headerlink" title="老话，说说我为什么要掌握Docker?"></a>老话，说说我为什么要掌握Docker?</h2><p>Docker 已成为现代 IT 和开发环境中不可或缺的工具。对于我的职业发展和个人兴趣来说，掌握 Docker 具有显著的优势，尤其是在涉及技术环境部署、物联网、智能化设备以及 NAS 系统时。以下是我认为更详细的原因：</p><h3 id="1-职业发展需求：技术环境的部署和管理"><a href="#1-职业发展需求：技术环境的部署和管理" class="headerlink" title="1. 职业发展需求：技术环境的部署和管理"></a>1. 职业发展需求：技术环境的部署和管理</h3><pre><code>1.1. 高效的环境部署一致性：Docker 容器确保在开发、测试和生产环境中运行的应用程序具有一致性，无论底层环境如何变化。隔离性：每个容器独立运行，避免不同应用之间的冲突和依赖问题。快速启动：容器的轻量级特性使得启动速度非常快，便于快速部署和迭代。1.2. 易于扩展和管理弹性扩展：Docker 容器可以轻松地横向扩展，满足应用程序的负载需求。便捷的更新：通过镜像管理和版本控制，可以快速更新和回滚应用程序，简化维护工作。1.3. 强大的生态系统丰富的工具和服务：Docker 提供了从开发到部署的一整套工具，支持与 CI/CD 流水线、编排系统（如 Kubernetes）的无缝集成。社区支持：大量的开源项目和社区支持，使得 Docker 生态系统不断发展和完善。</code></pre><h3 id="2-个人兴趣与物联网、智能化设备"><a href="#2-个人兴趣与物联网、智能化设备" class="headerlink" title="2. 个人兴趣与物联网、智能化设备"></a>2. 个人兴趣与物联网、智能化设备</h3><pre><code>2.1. 快速试验和开发轻量化：Docker 容器可以在资源有限的设备上高效运行，适用于物联网和智能化设备的开发与部署。灵活性：无需修改底层操作系统，就可以在 Docker 容器中运行不同的服务和应用，方便测试和实验。2.2. 多样化的应用场景跨平台兼容性：Docker 支持在不同硬件架构上运行，适用于各种物联网设备和嵌入式系统。模块化：通过容器化，能将不同的功能模块化，便于管理和更新，提升开发效率。</code></pre><h3 id="3-NAS-系统中的最佳选择"><a href="#3-NAS-系统中的最佳选择" class="headerlink" title="3. NAS 系统中的最佳选择"></a>3. NAS 系统中的最佳选择</h3><pre><code>3.1. 轻松部署与管理简化复杂性：NAS（网络附加存储）设备通常用于家庭或小型办公室环境，Docker 可以简化这些设备上的应用部署过程。快速安装：通过 Docker，可以快速安装和配置各种常用的应用和服务，如文件共享、媒体服务器、数据库等。3.2. 高效资源利用低资源占用：相比传统的虚拟机，Docker 容器更加轻量，能更好地利用 NAS 设备的资源。并发运行：在同一个 NAS 上，可以同时运行多个 Docker 容器，满足多种应用需求。3.3. 灵活的扩展和升级动态调整：根据需要，随时可以增加或删除容器，灵活调整系统功能和容量。无缝升级：通过更新容器镜像，可以轻松完成系统和应用的升级，而无需重启整个 NAS 系统。</code></pre><h2 id="Docker-原理"><a href="#Docker-原理" class="headerlink" title="Docker 原理"></a>Docker 原理</h2><p>Docker 利用操作系统级别的虚拟化技术来提供软件容器，使得应用程序可以在隔离的环境中运行。我曾经探讨及查看，在宿主机中docker每一个启动容器都是一个现成一个信号，所以首先我们要了解主要的核心组件和概念包括：</p><h3 id="1-Docker-镜像（Image）"><a href="#1-Docker-镜像（Image）" class="headerlink" title="1. Docker 镜像（Image）"></a>1. Docker 镜像（Image）</h3><p>定义：只读的模板，包含运行应用程序所需的一切，包括代码、库、环境变量等。[目前如果不科学上网，就多看看B站吧，从2024-06-07号开始，链路国外镜像源逐渐的不能用了<br>，后续再记录怎样替换镜像源，一言难尽]作用：用于创建 Docker 容器。</p><h3 id="2-Docker-容器（Container）"><a href="#2-Docker-容器（Container）" class="headerlink" title="2. Docker 容器（Container）"></a>2. Docker 容器（Container）</h3><p>定义：由镜像实例化而来的一个运行环境，是一个轻量级、独立的可执行包。<br>作用：确保应用程序及其依赖可以在任何环境下稳定运行。</p><h3 id="3-Docker-引擎（Docker-Engine）-Docker的软件及命令应用，在宿主机中会显示"><a href="#3-Docker-引擎（Docker-Engine）-Docker的软件及命令应用，在宿主机中会显示" class="headerlink" title="3. Docker 引擎（Docker Engine） [Docker的软件及命令应用，在宿主机中会显示]"></a>3. Docker 引擎（Docker Engine） [Docker的软件及命令应用，在宿主机中会显示]</h3><p>定义：Docker 的核心组件，包含 Docker 守护进程（Docker Daemon）、REST API 接口和命令行工具（CLI）。<br>作用：负责管理 Docker 容器和镜像。</p><h3 id="4-Docker-文件（Dockerfile）-Docker既然是个容器，我可以通过这个方式构建脚本化生成我需要的容器运行逻辑"><a href="#4-Docker-文件（Dockerfile）-Docker既然是个容器，我可以通过这个方式构建脚本化生成我需要的容器运行逻辑" class="headerlink" title="4. Docker 文件（Dockerfile）[Docker既然是个容器，我可以通过这个方式构建脚本化生成我需要的容器运行逻辑]"></a>4. Docker 文件（Dockerfile）[Docker既然是个容器，我可以通过这个方式构建脚本化生成我需要的容器运行逻辑]</h3><p>定义：一个文本文件，包含一系列指令，用于定义如何构建 Docker 镜像。<br>作用：通过自动化的方式生成定制化的镜像。</p><h3 id="5-Docker-Compose-配置文件一样的存在"><a href="#5-Docker-Compose-配置文件一样的存在" class="headerlink" title="5. Docker Compose  [配置文件一样的存在]"></a>5. Docker Compose  [配置文件一样的存在]</h3><p>定义：用于定义和运行多容器 Docker 应用的工具。<br>作用：通过一个 YAML 文件来配置应用程序的服务、网络和卷。<br>二、Windows 系统上安装 Docker</p><ol><li>安装前的准备<br>系统要求：Windows 10 64-bit: Pro, Enterprise, or Education 版本，1903 或更高版本；或 Windows Server 2019。<br>硬件要求：启用硬件虚拟化（Intel VT-x 或 AMD-V）。</li><li>安装步骤<br>2.1. 下载 Docker Desktop<br>访问<a href="https://www.docker.com/"> Docker 官网</a>下载安装包，mac操作系统直接下载dmg安装包。<br>下载适用于 Windows 的 Docker Desktop 安装程序。<br>2.2. 安装 Docker Desktop<br>双击安装包并按照提示完成安装。<br>在安装过程中，可以选择安装 WSL 2（适用于更高效的 Linux 容器运行）。<br>2.3. 配置 Docker Desktop<br>安装完成后，启动 Docker Desktop。<br>初次启动时，选择使用 WSL 2 还是 Hyper-V 作为后台支持。<br>完成基本配置，确保 Docker Desktop 已正常运行（图标应显示在系统托盘中）。<br>2.4. 验证安装<br>打开命令提示符或 PowerShell，运行以下命令验证 Docker 安装：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version  <span class="comment">#显示 Docker 版本信息。</span></span><br></pre></td></tr></table></figure>运行测试容器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world  <span class="comment">#如果看到 &quot;Hello from Docker!&quot; 的输出，则说明 Docker 已成功安装和配置。</span></span><br></pre></td></tr></table></figure>三、Linux 系统上安装 Docker</li><li>安装前的准备<br>系统要求：现代的 Linux 发行版，通常建议使用最新的版本。<br>权限要求：需要具有 sudo 或 root 权限来安装和管理 Docker。</li><li>安装步骤<br>2.1. 更新包管理器[Ubuntu apt管理器  ]<br>使用以下命令更新系统的包管理器（以 Ubuntu 为例）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  <span class="comment">#如果看到 &quot;Hello from Docker!&quot; 的输出，则说明 Docker 已成功安装和配置。</span></span><br></pre></td></tr></table></figure>2.2. 安装必要的依赖<br>安装依赖包，确保系统支持 HTTPS：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>2.3. 添加 Docker GPG 密钥<br>使用以下命令添加 Docker 官方的 GPG 密钥：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>2.4. 添加 Docker 仓库<br>添加 Docker 的 APT 仓库：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure>2.5. 安装 Docker CE<br>更新包管理器，并安装 Docker CE（Community Edition）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>2.6. 启动并验证 Docker<br>启动 Docker 服务：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>验证 Docker 安装：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker --version  <span class="comment">#显示 Docker 版本信息。</span></span><br></pre></td></tr></table></figure>运行测试容器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world  <span class="comment">#如果看到 &quot;Hello from Docker!&quot; 的输出，则说明 Docker 已成功安装和配置。</span></span><br></pre></td></tr></table></figure>2.7. （可选,但我一般都配置下方便，如果主机为业务机就不配置了）配置非 root 用户运行 Docker<br>创建 Docker 用户组，并将当前用户添加到组中：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>退出并重新登录，以应用组更改。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> docker 部署 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/27/hello-world/"/>
      <url>/2024/06/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo 项目并在 GitHub 上部署指南</title>
      <link href="/2022/03/02/My-First-Post/"/>
      <url>/2022/03/02/My-First-Post/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Hexo-项目并在-GitHub-上部署指南"><a href="#使用-Hexo-项目并在-GitHub-上部署指南" class="headerlink" title="使用 Hexo 项目并在 GitHub 上部署指南"></a>使用 Hexo 项目并在 GitHub 上部署指南</h1><h2 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h2><p>Hexo 是一个快速、简洁且高效的博客框架，基于 Node.js 开发，适用于个人和团队博客的搭建。</p><h2 id="我为什么选择Hexo-作为博客框架的搭建"><a href="#我为什么选择Hexo-作为博客框架的搭建" class="headerlink" title="我为什么选择Hexo,作为博客框架的搭建"></a>我为什么选择Hexo,作为博客框架的搭建</h2><p>原因：近期在使用air2软件的服务中，相关bt离线服务无法正常下载，在google搜索后发现了一个对该问题分析原因的网站[网站地址]（<a href="https://p3terx.com/">https://p3terx.com/</a> “p3terx”），点了点，加载响应超级快，体验感觉非常好，我就希望我的博客主站就用这个来做吧，那么是怎么做呢，先通过openai的chatgpt 进行交互，了解到网站是由Hexo 及butterfly主题来生成的。那么我决定来搭建一个属于个人的博客网站。</p><h2 id="步骤一：安装-Hexo"><a href="#步骤一：安装-Hexo" class="headerlink" title="步骤一：安装 Hexo"></a>步骤一：安装 Hexo</h2><ol><li><p><strong>前置：本地服务一定有 Node.js 和 npm</strong></p><ul><li>访问 <a href="https://nodejs.org/">Node.js 官网</a> 下载并安装最新版本的 Node.js。</li><li>npm 会随 Node.js 一同安装。</li></ul></li><li><p><strong>安装 Hexo</strong></p><ul><li>npm install -g hexo-cli</li><li>hexo init myblog</li></ul></li><li><p><strong>hexo的一些指令及文件格式介绍</strong></p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init <span class="comment">#命令用于初始化一个本地文件夹为网站的根目录</span></span><br><span class="line">$ hexo new title <span class="comment">#新建一篇文章</span></span><br><span class="line">$ hexo generate <span class="comment">#可以简写成 hexo g该命令用于生成静态文件</span></span><br><span class="line">$ hexo server <span class="comment">#命令用于启动本地服务器，一般可以简写成 hexo s</span></span><br><span class="line">   <span class="comment">#可以加一些参数</span></span><br><span class="line">      -p    <span class="comment">#选项 ，指定服务器端口，默认为 4000</span></span><br><span class="line">      -i    <span class="comment">#选项，指定服务器 IP 地址，默认为 0.0.0.0</span></span><br><span class="line">      -s    <span class="comment">#选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</span></span><br><span class="line">$ hexo deploy <span class="comment">#命令用于部署网站，一般可以简写成 hexo d (这个基本就是推送部署到指定位置)</span></span><br><span class="line">$ hexo clean <span class="comment">#命令用于清理缓存文件，是一个比较常用的命令</span></span><br><span class="line">$ hexo --safe <span class="comment">#表示安全模式，用于禁用加载插件和脚本</span></span><br><span class="line">$ hexo --debug <span class="comment">#表示调试模式，用于将消息详细记录到终端和 debug.log 文件</span></span><br><span class="line">$ hexo --silent  <span class="comment">#表示静默模式，用于静默输出到终端</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="步骤二：配置主题与文件目录"><a href="#步骤二：配置主题与文件目录" class="headerlink" title="步骤二：配置主题与文件目录"></a>步骤二：配置主题与文件目录</h2><ol><li><strong>Butterfly主题下载</strong><br>-项目根目录下安装 Butterfly 主题   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-theme-butterfly</span><br></pre></td></tr></table></figure>-配置文件<blockquote><p>hexo配置文件<br>   -项目根目录：_config.yml<br>   -找到 theme 配置项，将其值改为 butterfly：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure></p></blockquote></li><li><strong>Butterfly 主题配置</strong><br>-Butterfly 主题有自己的配置文件 _config.butterfly.yml，通常在 themes&#x2F;butterfly&#x2F; 目录下。<blockquote><p>_config.butterfly.yml<br>   -网站基本信息：如标题、描述、语言等。<br>   -菜单和导航栏：定义导航栏中的菜单项。<br>   -外观：如主题颜色、字体、背景图等。<br>   -插件和小工具：如搜索功能、标签云、分类、最近文章等。</p></blockquote></li></ol><h3 id="撰写文章"><a href="#撰写文章" class="headerlink" title="撰写文章"></a>撰写文章</h3><ol><li><strong>Hexo 使用 Markdown 格式来撰写文章。</strong><ul><li>手动创建：在 source&#x2F;_posts&#x2F; 目录下，1.可以创建一个新的 Markdown 文件：**.md</li><li>自动创建： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new todaynode <span class="comment">#新建一篇文章</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="步骤三：hexo部署：配置-Git"><a href="#步骤三：hexo部署：配置-Git" class="headerlink" title="步骤三：hexo部署：配置 Git"></a>步骤三：hexo部署：配置 Git</h2><ol><li><p><strong>在 GitHub 上创建仓库主站。</strong></p><ul><li>登录 GitHub，创建一个新的空仓库，例如 username.github.io（其中 username 是你的 GitHub 用户名）。</li></ul></li><li><p><strong>hexo 部署</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  <span class="comment">#该命令用于生成静态文件  public </span></span><br></pre></td></tr></table></figure><ul><li>在 Hexo 项目根目录下，安装 hexo-deployer-git 插件</li><li>配置 _config.yml 文件，添加部署设置： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ deploy:</span><br><span class="line">   <span class="built_in">type</span>: git</span><br><span class="line">   repo: https://github.com/your-username/your-repo.git</span><br><span class="line">   branch: main</span><br></pre></td></tr></table></figure></li><li>配置 Git<blockquote><p>使用 SSH 密钥认证：<br>   生成 SSH 密钥：如果你还没有 SSH 密钥，可以使用以下命令生成：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制代码</span></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"><span class="comment">#按照提示一路回车，生成密钥对。</span></span><br><span class="line"><span class="comment">#添加 SSH 密钥到 GitHub：</span></span><br><span class="line"><span class="comment">#复制你的 SSH 公钥：</span></span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub  <span class="comment">#(ssh 目录)</span></span><br><span class="line"><span class="comment">#将公钥添加到 GitHub 的 SSH 设置中。</span></span><br><span class="line"><span class="comment">#登录 GitHub，转到 Settings -&gt; SSH and GPG keys -&gt; New SSH key，将复制的公钥粘贴到 Key 文本框中，然后点击 Add SSH key。</span></span><br></pre></td></tr></table></figure></p></blockquote></li><li>推送 hexo d <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d  <span class="comment">#会自动推送public目录下的文件到git </span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="其它GIT相关"><a href="#其它GIT相关" class="headerlink" title="其它GIT相关"></a>其它GIT相关</h3><ul><li>使用git 托管工具推送部署到 GitHub Pages</li><li>Git 基本操作<blockquote><pre><code> git info   初始化 git remote add origin git@github.com:wangyaoqi/wangyaoqi.github.io.git        设置远程仓库 git remote -v  确认 origin 远程仓库 git add .  #提交更改到本地仓库 git commit -m &quot;提交说明&quot;    git push origin main      #推送本地更改到远程仓库 git checkout main   #切换分支 git pull origin main  #拉取分支变更 git merge my-new-branch  #合并分支 git merge my-new-branch --allow-unrelated-histories  #强制合并  前提已在主分支下</code></pre></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
